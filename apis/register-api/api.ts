// tslint:disable
/**
 * register-v1
 * Register API (COMING SOON)  Provides integration with supported Insurance Registration bodies. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * JSON API message.
 * @export
 * @interface ApiMessage
 */
export interface ApiMessage {
    /**
     * HTTP status code.
     * @type {number}
     * @memberof ApiMessage
     */
    status?: number;
    /**
     * HTTP status text.
     * @type {string}
     * @memberof ApiMessage
     */
    error?: string;
    /**
     * Custom message.
     * @type {string}
     * @memberof ApiMessage
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface CreatedTrait
 */
export interface CreatedTrait {
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof CreatedTrait
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof CreatedTrait
     */
    createdBy: string;
}
/**
 * Hypermedia link
 * @export
 * @interface HalLink
 */
export interface HalLink {
    /**
     * Hypertext reference
     * @type {string}
     * @memberof HalLink
     */
    href: string;
}
/**
 * 
 * @export
 * @interface HalNotificationList
 */
export interface HalNotificationList {
    /**
     * 
     * @type {HalNotificationListEmbedded}
     * @memberof HalNotificationList
     */
    _embedded?: HalNotificationListEmbedded;
}
/**
 * 
 * @export
 * @interface HalNotificationListEmbedded
 */
export interface HalNotificationListEmbedded {
    /**
     * 
     * @type {Array<Notification>}
     * @memberof HalNotificationListEmbedded
     */
    notifications: Array<Notification>;
}
/**
 * 
 * @export
 * @interface HalPageLinks
 */
export interface HalPageLinks {
    /**
     * Link to first page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    first?: HalLink;
    /**
     * Link to next page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    next?: HalLink;
    /**
     * Link to previous page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    prev?: HalLink;
    /**
     * Link to last page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    last?: HalLink;
}
/**
 * HAL/Hypermedia page relations
 * @export
 * @interface HalPageTrait
 */
export interface HalPageTrait {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof HalPageTrait
     */
    _links?: HalPageLinks;
    /**
     * Page metadata.
     * @type {object}
     * @memberof HalPageTrait
     */
    page?: object;
}
/**
 * HAL/Hypermedia resource charactaristics.
 * @export
 * @interface HalResourceTrait
 */
export interface HalResourceTrait {
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _embedded?: { [key: string]: object; };
}
/**
 * Notification resource
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof Notification
     */
    notificationId: string;
    /**
     * 
     * @type {PolicyKey}
     * @memberof Notification
     */
    policy: PolicyKey;
    /**
     * 
     * @type {RegisterProvider}
     * @memberof Notification
     */
    registerProvider: RegisterProvider;
    /**
     * Status of the notification attempt.  * SUCCEEDED - The notification was generated and sent, and the register provider confirmed it was received.  * FAILED - Either the notifcation could not be generated or the register provider returned an error. 
     * @type {string}
     * @memberof Notification
     */
    status: NotificationStatusEnum;
    /**
     * Context data returned by the executor function after processing.
     * @type {object}
     * @memberof Notification
     */
    data: object | null;
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof Notification
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof Notification
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof Notification
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof Notification
     */
    _embedded?: { [key: string]: object; };
}

/**
    * @export
    * @enum {string}
    */
export enum NotificationStatusEnum {
    SUCCEEDED = 'SUCCEEDED',
    FAILED = 'FAILED'
}

/**
 * Notification core data.
 * @export
 * @interface NotificationBody
 */
export interface NotificationBody {
    /**
     * 
     * @type {PolicyKey}
     * @memberof NotificationBody
     */
    policy: PolicyKey;
    /**
     * 
     * @type {RegisterProvider}
     * @memberof NotificationBody
     */
    registerProvider: RegisterProvider;
    /**
     * Status of the notification attempt.  * SUCCEEDED - The notification was generated and sent, and the register provider confirmed it was received.  * FAILED - Either the notifcation could not be generated or the register provider returned an error. 
     * @type {string}
     * @memberof NotificationBody
     */
    status: NotificationBodyStatusEnum;
    /**
     * Context data returned by the executor function after processing.
     * @type {object}
     * @memberof NotificationBody
     */
    data: object | null;
}

/**
    * @export
    * @enum {string}
    */
export enum NotificationBodyStatusEnum {
    SUCCEEDED = 'SUCCEEDED',
    FAILED = 'FAILED'
}

/**
 * Reference to a notification resource.
 * @export
 * @interface NotificationKey
 */
export interface NotificationKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof NotificationKey
     */
    notificationId: string;
}
/**
 * Page of Notification resources
 * @export
 * @interface NotificationPagedModel
 */
export interface NotificationPagedModel {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof NotificationPagedModel
     */
    _links: HalPageLinks;
    /**
     * 
     * @type {HalNotificationListEmbedded}
     * @memberof NotificationPagedModel
     */
    _embedded?: HalNotificationListEmbedded;
    /**
     * Page metadata.
     * @type {object}
     * @memberof NotificationPagedModel
     */
    page?: object;
}
/**
 * Notification request body.
 * @export
 * @interface NotificationRequest
 */
export interface NotificationRequest {
    /**
     * 
     * @type {PolicyKey}
     * @memberof NotificationRequest
     */
    policy: PolicyKey;
}
/**
 * HAL/Hypermedia Page
 * @export
 * @interface PagedModel
 */
export interface PagedModel {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof PagedModel
     */
    _links: HalPageLinks;
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof PagedModel
     */
    _embedded?: { [key: string]: object; };
    /**
     * Page metadata.
     * @type {object}
     * @memberof PagedModel
     */
    page?: object;
}
/**
 * Reference to a policy resource
 * @export
 * @interface PolicyKey
 */
export interface PolicyKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof PolicyKey
     */
    policyId: string;
}
/**
 * Insurance register service provider.
 * @export
 * @enum {string}
 */
export enum RegisterProvider {
    MDS = 'MDS'
}

/**
 * Resource with HAL/Hypermedia support
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof Resource
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof Resource
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof Resource
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof Resource
     */
    _embedded?: { [key: string]: object; };
}
/**
 * Related platform tenant.
 * @export
 * @enum {string}
 */
export enum Tenant {
    INSHUR = 'INSHUR'
}


/**
 * EndPointsApi - axios parameter creator
 * @export
 */
export const EndPointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Notifies the relevant registration body of a policy cancellation.
         * @summary Notify of cancelled policy
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {NotificationRequest} [notificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelledPolicyNotification: async (xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/notification/policy-cancelled`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof notificationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(notificationRequest !== undefined ? notificationRequest : {}) : (notificationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns existing notification log.
         * @summary Retrieve Notification
         * @param {string} id Unique id of the notification resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotification: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getNotification.');
            }
            const localVarPath = `/notification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated dataset of notification logs with optional filters by policy and register.
         * @summary List Notifications
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [policyId] Policy reference.
         * @param {RegisterProvider} [registerProvider] Unique insurance register provider code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotifications: async (xINSHURTenant?: Tenant, size?: number, page?: number, policyId?: string, registerProvider?: RegisterProvider, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (policyId !== undefined) {
                localVarQueryParameter['policyId'] = policyId;
            }

            if (registerProvider !== undefined) {
                localVarQueryParameter['registerProvider'] = registerProvider;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Notifies the relevant registration body of a new policy.
         * @summary Notify of new policy
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {NotificationRequest} [notificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newPolicyNotification: async (xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/notification/policy-created`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof notificationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(notificationRequest !== undefined ? notificationRequest : {}) : (notificationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Notifies the relevant registration body of a policy renewal.
         * @summary Notify of renewed policy
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {NotificationRequest} [notificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewedPolicyNotification: async (xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/notification/policy-renewed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof notificationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(notificationRequest !== undefined ? notificationRequest : {}) : (notificationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndPointsApi - functional programming interface
 * @export
 */
export const EndPointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Notifies the relevant registration body of a policy cancellation.
         * @summary Notify of cancelled policy
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {NotificationRequest} [notificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelledPolicyNotification(xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).cancelledPolicyNotification(xINSHURTenant, notificationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getMetadata(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns existing notification log.
         * @summary Retrieve Notification
         * @param {string} id Unique id of the notification resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotification(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getNotification(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a paginated dataset of notification logs with optional filters by policy and register.
         * @summary List Notifications
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [policyId] Policy reference.
         * @param {RegisterProvider} [registerProvider] Unique insurance register provider code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNotifications(xINSHURTenant?: Tenant, size?: number, page?: number, policyId?: string, registerProvider?: RegisterProvider, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationPagedModel>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).listNotifications(xINSHURTenant, size, page, policyId, registerProvider, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Notifies the relevant registration body of a new policy.
         * @summary Notify of new policy
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {NotificationRequest} [notificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newPolicyNotification(xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).newPolicyNotification(xINSHURTenant, notificationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Notifies the relevant registration body of a policy renewal.
         * @summary Notify of renewed policy
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {NotificationRequest} [notificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renewedPolicyNotification(xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).renewedPolicyNotification(xINSHURTenant, notificationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EndPointsApi - factory interface
 * @export
 */
export const EndPointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Notifies the relevant registration body of a policy cancellation.
         * @summary Notify of cancelled policy
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {NotificationRequest} [notificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelledPolicyNotification(xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options?: any): AxiosPromise<Notification> {
            return EndPointsApiFp(configuration).cancelledPolicyNotification(xINSHURTenant, notificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(options?: any): AxiosPromise<{ [key: string]: object; }> {
            return EndPointsApiFp(configuration).getMetadata(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns existing notification log.
         * @summary Retrieve Notification
         * @param {string} id Unique id of the notification resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotification(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Notification> {
            return EndPointsApiFp(configuration).getNotification(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated dataset of notification logs with optional filters by policy and register.
         * @summary List Notifications
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [policyId] Policy reference.
         * @param {RegisterProvider} [registerProvider] Unique insurance register provider code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotifications(xINSHURTenant?: Tenant, size?: number, page?: number, policyId?: string, registerProvider?: RegisterProvider, options?: any): AxiosPromise<NotificationPagedModel> {
            return EndPointsApiFp(configuration).listNotifications(xINSHURTenant, size, page, policyId, registerProvider, options).then((request) => request(axios, basePath));
        },
        /**
         * Notifies the relevant registration body of a new policy.
         * @summary Notify of new policy
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {NotificationRequest} [notificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newPolicyNotification(xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options?: any): AxiosPromise<Notification> {
            return EndPointsApiFp(configuration).newPolicyNotification(xINSHURTenant, notificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Notifies the relevant registration body of a policy renewal.
         * @summary Notify of renewed policy
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {NotificationRequest} [notificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewedPolicyNotification(xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options?: any): AxiosPromise<Notification> {
            return EndPointsApiFp(configuration).renewedPolicyNotification(xINSHURTenant, notificationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndPointsApi - object-oriented interface
 * @export
 * @class EndPointsApi
 * @extends {BaseAPI}
 */
export class EndPointsApi extends BaseAPI {
    /**
     * Notifies the relevant registration body of a policy cancellation.
     * @summary Notify of cancelled policy
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {NotificationRequest} [notificationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public cancelledPolicyNotification(xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options?: any) {
        return EndPointsApiFp(this.configuration).cancelledPolicyNotification(xINSHURTenant, notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
     * @summary Service Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getMetadata(options?: any) {
        return EndPointsApiFp(this.configuration).getMetadata(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns existing notification log.
     * @summary Retrieve Notification
     * @param {string} id Unique id of the notification resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getNotification(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).getNotification(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated dataset of notification logs with optional filters by policy and register.
     * @summary List Notifications
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {number} [size] Page size.
     * @param {number} [page] Page number. Zero-based page index. Default 0.
     * @param {string} [policyId] Policy reference.
     * @param {RegisterProvider} [registerProvider] Unique insurance register provider code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public listNotifications(xINSHURTenant?: Tenant, size?: number, page?: number, policyId?: string, registerProvider?: RegisterProvider, options?: any) {
        return EndPointsApiFp(this.configuration).listNotifications(xINSHURTenant, size, page, policyId, registerProvider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Notifies the relevant registration body of a new policy.
     * @summary Notify of new policy
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {NotificationRequest} [notificationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public newPolicyNotification(xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options?: any) {
        return EndPointsApiFp(this.configuration).newPolicyNotification(xINSHURTenant, notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Notifies the relevant registration body of a policy renewal.
     * @summary Notify of renewed policy
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {NotificationRequest} [notificationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public renewedPolicyNotification(xINSHURTenant?: Tenant, notificationRequest?: NotificationRequest, options?: any) {
        return EndPointsApiFp(this.configuration).renewedPolicyNotification(xINSHURTenant, notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

}



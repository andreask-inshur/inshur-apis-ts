// tslint:disable
/**
 * user-v1
 * User API Schema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * JSON API message.
 * @export
 * @interface ApiMessage
 */
export interface ApiMessage {
    /**
     * HTTP status code.
     * @type {number}
     * @memberof ApiMessage
     */
    status?: number;
    /**
     * HTTP status text.
     * @type {string}
     * @memberof ApiMessage
     */
    error?: string;
    /**
     * Custom message.
     * @type {string}
     * @memberof ApiMessage
     */
    message?: string;
}
/**
 * @type Auth0IdentityType
 * @export
 */
export type Auth0IdentityType = Auth0UberIdentity | Auth0UsernamePasswordIdentity;

/**
 * Auth0 \'Uber\' social identity
 * @export
 * @interface Auth0UberIdentity
 */
export interface Auth0UberIdentity {
    /**
     * 
     * @type {string}
     * @memberof Auth0UberIdentity
     */
    provider: Auth0UberIdentityProviderEnum;
    /**
     * 
     * @type {string}
     * @memberof Auth0UberIdentity
     */
    connection: Auth0UberIdentityConnectionEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum Auth0UberIdentityProviderEnum {
    Oauth2 = 'oauth2'
}
/**
    * @export
    * @enum {string}
    */
export enum Auth0UberIdentityConnectionEnum {
    Uber = 'uber'
}

/**
 * Auth0 \'Username-Password-Authentication\' identity
 * @export
 * @interface Auth0UsernamePasswordIdentity
 */
export interface Auth0UsernamePasswordIdentity {
    /**
     * 
     * @type {string}
     * @memberof Auth0UsernamePasswordIdentity
     */
    provider: Auth0UsernamePasswordIdentityProviderEnum;
    /**
     * 
     * @type {string}
     * @memberof Auth0UsernamePasswordIdentity
     */
    connection: Auth0UsernamePasswordIdentityConnectionEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum Auth0UsernamePasswordIdentityProviderEnum {
    Auth0 = 'auth0'
}
/**
    * @export
    * @enum {string}
    */
export enum Auth0UsernamePasswordIdentityConnectionEnum {
    UsernamePasswordAuthentication = 'Username-Password-Authentication'
}

/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * Unique identifier for a user (defined by Auth0)
     * @type {string}
     * @memberof Customer
     */
    userId: string;
    /**
     * Customers given name. Optional as this is not required during registration. By convention, this SHOULD be set by the UI during the quote question flow.
     * @type {string}
     * @memberof Customer
     */
    firstName?: string;
    /**
     * Customers family name. Optional as this is not required during registration. By convention, this SHOULD be set by the UI during the quote question flow.
     * @type {string}
     * @memberof Customer
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    telephone: string;
    /**
     * 
     * @type {UberDriver}
     * @memberof Customer
     */
    uber?: UberDriver;
    /**
     * 
     * @type {MarketingPreferences}
     * @memberof Customer
     */
    marketingPreferences?: MarketingPreferences;
    /**
     * All identities linked with this users account.
     * @type {Array<Auth0IdentityType>}
     * @memberof Customer
     */
    identities: Array<Auth0IdentityType>;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof Customer
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof Customer
     */
    _embedded?: { [key: string]: object; };
}
/**
 * Customer resource
 * @export
 * @interface CustomerBody
 */
export interface CustomerBody {
    /**
     * Unique identifier for a user (defined by Auth0)
     * @type {string}
     * @memberof CustomerBody
     */
    userId: string;
    /**
     * Customers given name. Optional as this is not required during registration. By convention, this SHOULD be set by the UI during the quote question flow.
     * @type {string}
     * @memberof CustomerBody
     */
    firstName?: string;
    /**
     * Customers family name. Optional as this is not required during registration. By convention, this SHOULD be set by the UI during the quote question flow.
     * @type {string}
     * @memberof CustomerBody
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerBody
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerBody
     */
    telephone: string;
    /**
     * 
     * @type {UberDriver}
     * @memberof CustomerBody
     */
    uber?: UberDriver;
    /**
     * 
     * @type {MarketingPreferences}
     * @memberof CustomerBody
     */
    marketingPreferences?: MarketingPreferences;
    /**
     * All identities linked with this users account.
     * @type {Array<Auth0IdentityType>}
     * @memberof CustomerBody
     */
    identities: Array<Auth0IdentityType>;
}
/**
 * Customer update object.
 * @export
 * @interface CustomerPatchRequest
 */
export interface CustomerPatchRequest {
    /**
     * 
     * @type {MarketingPreferences}
     * @memberof CustomerPatchRequest
     */
    marketingPreferences?: MarketingPreferences;
}
/**
 * Hypermedia link
 * @export
 * @interface HalLink
 */
export interface HalLink {
    /**
     * Hypertext reference
     * @type {string}
     * @memberof HalLink
     */
    href: string;
}
/**
 * HAL/Hypermedia resource charactaristics.
 * @export
 * @interface HalResourceTrait
 */
export interface HalResourceTrait {
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _embedded?: { [key: string]: object; };
}
/**
 * Customer marketing preferences
 * @export
 * @interface MarketingPreferences
 */
export interface MarketingPreferences {
    /**
     * 
     * @type {string}
     * @memberof MarketingPreferences
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MarketingPreferences
     */
    optIn: boolean;
}
/**
 * Related platform tenant.
 * @export
 * @enum {string}
 */
export enum Tenant {
    INSHUR = 'INSHUR'
}

/**
 * User Uber details
 * @export
 * @interface UberDriver
 */
export interface UberDriver {
    /**
     * 
     * @type {string}
     * @memberof UberDriver
     */
    rewardsTier: string;
    /**
     * 
     * @type {number}
     * @memberof UberDriver
     */
    rating: number;
    /**
     * 
     * @type {number}
     * @memberof UberDriver
     */
    totalTrips: number;
}

/**
 * EndPointsApi - axios parameter creator
 * @export
 */
export const EndPointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the specified customer resource.
         * @summary Get Customer
         * @param {string} id Unique id of the user.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCustomer.');
            }
            const localVarPath = `/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specified customer resource formatted as datasheet patch object.  **NOTE:** This returns a datasheet that includes uber driver details. It is compatible with products that include the UBER DRIVER FEATURE and assumes a single driver. In future, this is likely to be extended to take a product parameter so that the output is customised to the product feature set. 
         * @summary Get Customer as Datasheet
         * @param {string} id Unique id of the user.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAsDatasheet: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCustomerAsDatasheet.');
            }
            const localVarPath = `/customer/{id}/datasheet`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the specified customer properties.
         * @summary Update Customer
         * @param {string} id Unique id of the user.
         * @param {CustomerPatchRequest} customerPatchRequest 
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomer: async (id: string, customerPatchRequest: CustomerPatchRequest, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchCustomer.');
            }
            // verify required parameter 'customerPatchRequest' is not null or undefined
            if (customerPatchRequest === null || customerPatchRequest === undefined) {
                throw new RequiredError('customerPatchRequest','Required parameter customerPatchRequest was null or undefined when calling patchCustomer.');
            }
            const localVarPath = `/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof customerPatchRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(customerPatchRequest !== undefined ? customerPatchRequest : {}) : (customerPatchRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndPointsApi - functional programming interface
 * @export
 */
export const EndPointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the specified customer resource.
         * @summary Get Customer
         * @param {string} id Unique id of the user.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomer(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getCustomer(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the specified customer resource formatted as datasheet patch object.  **NOTE:** This returns a datasheet that includes uber driver details. It is compatible with products that include the UBER DRIVER FEATURE and assumes a single driver. In future, this is likely to be extended to take a product parameter so that the output is customised to the product feature set. 
         * @summary Get Customer as Datasheet
         * @param {string} id Unique id of the user.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerAsDatasheet(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getCustomerAsDatasheet(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getMetadata(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the specified customer properties.
         * @summary Update Customer
         * @param {string} id Unique id of the user.
         * @param {CustomerPatchRequest} customerPatchRequest 
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCustomer(id: string, customerPatchRequest: CustomerPatchRequest, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).patchCustomer(id, customerPatchRequest, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EndPointsApi - factory interface
 * @export
 */
export const EndPointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the specified customer resource.
         * @summary Get Customer
         * @param {string} id Unique id of the user.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Customer> {
            return EndPointsApiFp(configuration).getCustomer(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specified customer resource formatted as datasheet patch object.  **NOTE:** This returns a datasheet that includes uber driver details. It is compatible with products that include the UBER DRIVER FEATURE and assumes a single driver. In future, this is likely to be extended to take a product parameter so that the output is customised to the product feature set. 
         * @summary Get Customer as Datasheet
         * @param {string} id Unique id of the user.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAsDatasheet(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<{ [key: string]: object; }> {
            return EndPointsApiFp(configuration).getCustomerAsDatasheet(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(options?: any): AxiosPromise<{ [key: string]: object; }> {
            return EndPointsApiFp(configuration).getMetadata(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the specified customer properties.
         * @summary Update Customer
         * @param {string} id Unique id of the user.
         * @param {CustomerPatchRequest} customerPatchRequest 
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomer(id: string, customerPatchRequest: CustomerPatchRequest, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Customer> {
            return EndPointsApiFp(configuration).patchCustomer(id, customerPatchRequest, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndPointsApi - object-oriented interface
 * @export
 * @class EndPointsApi
 * @extends {BaseAPI}
 */
export class EndPointsApi extends BaseAPI {
    /**
     * Returns the specified customer resource.
     * @summary Get Customer
     * @param {string} id Unique id of the user.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getCustomer(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).getCustomer(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the specified customer resource formatted as datasheet patch object.  **NOTE:** This returns a datasheet that includes uber driver details. It is compatible with products that include the UBER DRIVER FEATURE and assumes a single driver. In future, this is likely to be extended to take a product parameter so that the output is customised to the product feature set. 
     * @summary Get Customer as Datasheet
     * @param {string} id Unique id of the user.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getCustomerAsDatasheet(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).getCustomerAsDatasheet(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
     * @summary Service Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getMetadata(options?: any) {
        return EndPointsApiFp(this.configuration).getMetadata(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the specified customer properties.
     * @summary Update Customer
     * @param {string} id Unique id of the user.
     * @param {CustomerPatchRequest} customerPatchRequest 
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public patchCustomer(id: string, customerPatchRequest: CustomerPatchRequest, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).patchCustomer(id, customerPatchRequest, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

}



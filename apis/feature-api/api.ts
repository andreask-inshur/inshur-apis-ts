// tslint:disable
/**
 * feature-v1
 * Feature API Service  Manages configuration of system features and datasheet collection properties. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * JSON API message.
 * @export
 * @interface ApiMessage
 */
export interface ApiMessage {
    /**
     * HTTP status code.
     * @type {number}
     * @memberof ApiMessage
     */
    status?: number;
    /**
     * HTTP status text.
     * @type {string}
     * @memberof ApiMessage
     */
    error?: string;
    /**
     * Custom message.
     * @type {string}
     * @memberof ApiMessage
     */
    message?: string;
}
/**
 * HAL/Hypermedia Collection
 * @export
 * @interface CollectionModel
 */
export interface CollectionModel extends HalResourceTrait {
}
/**
 * 
 * @export
 * @interface CreatedTrait
 */
export interface CreatedTrait {
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof CreatedTrait
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof CreatedTrait
     */
    createdBy: string;
}
/**
 * An attribute on the datasheet. Used to rate, quote and create a policy.
 * @export
 * @interface DatasheetProperty
 */
export interface DatasheetProperty {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof DatasheetProperty
     */
    datasheetPropertyId: string;
    /**
     * Major.Minor version number.
     * @type {string}
     * @memberof DatasheetProperty
     */
    version: string;
    /**
     * Name of the feature property.
     * @type {string}
     * @memberof DatasheetProperty
     */
    name: string;
    /**
     * Description of the feature property.
     * @type {string}
     * @memberof DatasheetProperty
     */
    description: string;
    /**
     * JSON path where the property must exist in the datasheet. This value is used to create the datasheet JSON schema. See product.datasheetSchema.
     * @type {string}
     * @memberof DatasheetProperty
     */
    jsonPath: string;
    /**
     * JSON type. Can be one of string, integer, number or boolean. This value is used to create the datasheet JSON schema. See Product.datasheetSchema.
     * @type {string}
     * @memberof DatasheetProperty
     */
    type: string;
    /**
     * List of allowed values for the property. Items in this list must comply with type and pattern. Used to generate a data sheet OAS3 schema.
     * @type {Array<string | number | boolean>}
     * @memberof DatasheetProperty
     */
    allowedValues?: Array<string | number | boolean>;
    /**
     * Default value for the property. Assigned when it is added to the data sheet object. This value must comply with type, allowedValues and pattern. The value must comply with type.
     * @type {string | number | boolean}
     * @memberof DatasheetProperty
     */
    defaultValue?: string | number | boolean;
    /**
     * Pattern regex expression to validate the input. The value must comply with type and allowedValues.
     * @type {string}
     * @memberof DatasheetProperty
     */
    pattern?: string;
    /**
     * JSON schema format. The value must comply with type, pattern and allowedValues.
     * @type {string}
     * @memberof DatasheetProperty
     */
    format?: string;
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof DatasheetProperty
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof DatasheetProperty
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof DatasheetProperty
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof DatasheetProperty
     */
    _embedded?: { [key: string]: object; };
}
/**
 * DatasheetProperty core data.
 * @export
 * @interface DatasheetPropertyBody
 */
export interface DatasheetPropertyBody {
    /**
     * Name of the feature property.
     * @type {string}
     * @memberof DatasheetPropertyBody
     */
    name: string;
    /**
     * Description of the feature property.
     * @type {string}
     * @memberof DatasheetPropertyBody
     */
    description: string;
    /**
     * JSON path where the property must exist in the datasheet. This value is used to create the datasheet JSON schema. See product.datasheetSchema.
     * @type {string}
     * @memberof DatasheetPropertyBody
     */
    jsonPath: string;
    /**
     * JSON type. Can be one of string, integer, number or boolean. This value is used to create the datasheet JSON schema. See Product.datasheetSchema.
     * @type {string}
     * @memberof DatasheetPropertyBody
     */
    type: string;
    /**
     * List of allowed values for the property. Items in this list must comply with type and pattern. Used to generate a data sheet OAS3 schema.
     * @type {Array<string | number | boolean>}
     * @memberof DatasheetPropertyBody
     */
    allowedValues?: Array<string | number | boolean>;
    /**
     * Default value for the property. Assigned when it is added to the data sheet object. This value must comply with type, allowedValues and pattern. The value must comply with type.
     * @type {string | number | boolean}
     * @memberof DatasheetPropertyBody
     */
    defaultValue?: string | number | boolean;
    /**
     * Pattern regex expression to validate the input. The value must comply with type and allowedValues.
     * @type {string}
     * @memberof DatasheetPropertyBody
     */
    pattern?: string;
    /**
     * JSON schema format. The value must comply with type, pattern and allowedValues.
     * @type {string}
     * @memberof DatasheetPropertyBody
     */
    format?: string;
}
/**
 * Reference to a DatasheetProperty resource.
 * @export
 * @interface DatasheetPropertyKey
 */
export interface DatasheetPropertyKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof DatasheetPropertyKey
     */
    datasheetPropertyId: string;
    /**
     * Major.Minor version number.
     * @type {string}
     * @memberof DatasheetPropertyKey
     */
    version: string;
}
/**
 * 
 * @export
 * @interface Feature
 */
export interface Feature {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof Feature
     */
    featureId: string;
    /**
     * Major.Minor version number.
     * @type {string}
     * @memberof Feature
     */
    version: string;
    /**
     * 
     * @type {Tenant}
     * @memberof Feature
     */
    tenant: Tenant;
    /**
     * Name of the product feature. Should be unique in the system. 
     * @type {string}
     * @memberof Feature
     */
    name: string;
    /**
     * Description of the product feature.
     * @type {string}
     * @memberof Feature
     */
    description: string;
    /**
     * Name of the Java class that implements this features event handlers. Set to null if the feature does not implement and event handlers.
     * @type {string}
     * @memberof Feature
     */
    eventHandlerClassName: string | null;
    /**
     * 
     * @type {Array<DatasheetPropertyKey>}
     * @memberof Feature
     */
    datasheetProperties: Array<DatasheetPropertyKey>;
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof Feature
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof Feature
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof Feature
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof Feature
     */
    _embedded?: { [key: string]: object; };
}
/**
 * Product feature that controls the shape and behavior of policies.
 * @export
 * @interface FeatureBody
 */
export interface FeatureBody {
    /**
     * 
     * @type {Tenant}
     * @memberof FeatureBody
     */
    tenant: Tenant;
    /**
     * Name of the product feature. Should be unique in the system. 
     * @type {string}
     * @memberof FeatureBody
     */
    name: string;
    /**
     * Description of the product feature.
     * @type {string}
     * @memberof FeatureBody
     */
    description: string;
    /**
     * Name of the Java class that implements this features event handlers. Set to null if the feature does not implement and event handlers.
     * @type {string}
     * @memberof FeatureBody
     */
    eventHandlerClassName: string | null;
    /**
     * 
     * @type {Array<DatasheetPropertyKey>}
     * @memberof FeatureBody
     */
    datasheetProperties: Array<DatasheetPropertyKey>;
}
/**
 * Product feature that controls the shape and behavior of policies.
 * @export
 * @interface FeatureKey
 */
export interface FeatureKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof FeatureKey
     */
    featureId: string;
    /**
     * Major.Minor version number.
     * @type {string}
     * @memberof FeatureKey
     */
    version: string;
}
/**
 * Page of Feature resources
 * @export
 * @interface FeaturePagedModel
 */
export interface FeaturePagedModel {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof FeaturePagedModel
     */
    _links: HalPageLinks;
    /**
     * 
     * @type {HalFeatureListEmbedded}
     * @memberof FeaturePagedModel
     */
    _embedded?: HalFeatureListEmbedded;
    /**
     * Page metadata.
     * @type {object}
     * @memberof FeaturePagedModel
     */
    page?: object;
}
/**
 * 
 * @export
 * @interface HalFeatureList
 */
export interface HalFeatureList {
    /**
     * 
     * @type {HalFeatureListEmbedded}
     * @memberof HalFeatureList
     */
    _embedded?: HalFeatureListEmbedded;
}
/**
 * 
 * @export
 * @interface HalFeatureListEmbedded
 */
export interface HalFeatureListEmbedded {
    /**
     * 
     * @type {Array<Feature>}
     * @memberof HalFeatureListEmbedded
     */
    features: Array<Feature>;
}
/**
 * Hypermedia link
 * @export
 * @interface HalLink
 */
export interface HalLink {
    /**
     * Hypertext reference
     * @type {string}
     * @memberof HalLink
     */
    href: string;
}
/**
 * 
 * @export
 * @interface HalPageLinks
 */
export interface HalPageLinks {
    /**
     * Link to first page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    first?: HalLink;
    /**
     * Link to next page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    next?: HalLink;
    /**
     * Link to previous page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    prev?: HalLink;
    /**
     * Link to last page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    last?: HalLink;
}
/**
 * HAL/Hypermedia page relations
 * @export
 * @interface HalPageTrait
 */
export interface HalPageTrait {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof HalPageTrait
     */
    _links?: HalPageLinks;
    /**
     * Page metadata.
     * @type {object}
     * @memberof HalPageTrait
     */
    page?: object;
}
/**
 * 
 * @export
 * @interface HalPropertyList
 */
export interface HalPropertyList {
    /**
     * 
     * @type {HalPropertyListEmbedded}
     * @memberof HalPropertyList
     */
    _embedded?: HalPropertyListEmbedded;
}
/**
 * 
 * @export
 * @interface HalPropertyListEmbedded
 */
export interface HalPropertyListEmbedded {
    /**
     * 
     * @type {Array<DatasheetProperty>}
     * @memberof HalPropertyListEmbedded
     */
    properties: Array<DatasheetProperty>;
}
/**
 * HAL/Hypermedia resource charactaristics.
 * @export
 * @interface HalResourceTrait
 */
export interface HalResourceTrait {
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _embedded?: { [key: string]: object; };
}
/**
 * HAL/Hypermedia Page
 * @export
 * @interface PagedModel
 */
export interface PagedModel {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof PagedModel
     */
    _links: HalPageLinks;
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof PagedModel
     */
    _embedded?: { [key: string]: object; };
    /**
     * Page metadata.
     * @type {object}
     * @memberof PagedModel
     */
    page?: object;
}
/**
 * Collection of DatasheetProperty resources
 * @export
 * @interface PropertyCollectionModel
 */
export interface PropertyCollectionModel {
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof PropertyCollectionModel
     */
    _links: { [key: string]: object; };
    /**
     * 
     * @type {HalPropertyListEmbedded}
     * @memberof PropertyCollectionModel
     */
    _embedded?: HalPropertyListEmbedded;
}
/**
 * Resource with HAL/Hypermedia support
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof Resource
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof Resource
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof Resource
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof Resource
     */
    _embedded?: { [key: string]: object; };
}
/**
 * Related platform tenant.
 * @export
 * @enum {string}
 */
export enum Tenant {
    INSHUR = 'INSHUR'
}


/**
 * EndPointsApi - axios parameter creator
 * @export
 */
export const EndPointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new feature resource.
         * @summary Create Feature
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {FeatureBody} [featureBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeature: async (xINSHURTenant?: Tenant, featureBody?: FeatureBody, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/feature`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureBody !== undefined ? featureBody : {}) : (featureBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new feature version resource.  The version is automatically calculated from the latest version.  TBC how to control a major or minor bump. 
         * @summary Create Feature Version
         * @param {string} id Unique id of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {FeatureBody} [featureBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureVersion: async (id: string, xINSHURTenant?: Tenant, featureBody?: FeatureBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createFeatureVersion.');
            }
            const localVarPath = `/feature/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureBody !== undefined ? featureBody : {}) : (featureBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new datasheet property configuration.
         * @summary Create Datasheet Property
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {DatasheetPropertyBody} [datasheetPropertyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProperty: async (xINSHURTenant?: Tenant, datasheetPropertyBody?: DatasheetPropertyBody, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/property`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof datasheetPropertyBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(datasheetPropertyBody !== undefined ? datasheetPropertyBody : {}) : (datasheetPropertyBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new datasheet property version.  The version number is automatically calculated from the latest version. 
         * @summary Create Datasheet Property Version
         * @param {string} id Unique id of the datasheet property resource.
         * @param {DatasheetPropertyBody} [datasheetPropertyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyFromLatestVersion: async (id: string, datasheetPropertyBody?: DatasheetPropertyBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createPropertyFromLatestVersion.');
            }
            const localVarPath = `/property/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof datasheetPropertyBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(datasheetPropertyBody !== undefined ? datasheetPropertyBody : {}) : (datasheetPropertyBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified feature resource.  NOTE: will only allow the delete if the feature is not in use on any product. 
         * @summary Delete Feature
         * @param {string} id Unique id of the feature resource.
         * @param {string} version Version of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeature: async (id: string, version: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteFeature.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling deleteFeature.');
            }
            const localVarPath = `/feature/{id}/v/{version}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified datasheet property resource.  NOTE: will only allow the delete if the property is not reference by any Feature, RatingAlgorithm or DocumentType. 
         * @summary Delete Datasheet Property
         * @param {string} id Unique id of the datasheet property resource.
         * @param {string} version Version of the datasheet property resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyVersion: async (id: string, version: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePropertyVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling deletePropertyVersion.');
            }
            const localVarPath = `/property/{id}/v/{version}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all versions of all datasheet properties. Optional filter by feature. No pagination currently available on this endpoint. 
         * @summary List Datasheet Properties
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {string} [featureId] Unique id of the feature resource.
         * @param {string} [featureVersion] Version of the feature resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasheetProperties: async (xINSHURTenant?: Tenant, featureId?: string, featureVersion?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/properties`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (featureId !== undefined) {
                localVarQueryParameter['featureId'] = featureId;
            }

            if (featureVersion !== undefined) {
                localVarQueryParameter['featureVersion'] = featureVersion;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specified feature definition.
         * @summary Get Feature
         * @param {string} id Unique id of the feature resource.
         * @param {string} version Version of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeature: async (id: string, version: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getFeature.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getFeature.');
            }
            const localVarPath = `/feature/{id}/v/{version}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the latest version of a feature definition.
         * @summary Get Feature Version (latest version)
         * @param {string} id Unique id of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureLatest: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getFeatureLatest.');
            }
            const localVarPath = `/feature/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all feature configurations
         * @summary List Features
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatures: async (xINSHURTenant?: Tenant, size?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the latest version of a datasheet property resource
         * @summary Get Datasheet Property (latest version)
         * @param {string} id Unique id of the datasheet property resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestPropertyVersion: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getLatestPropertyVersion.');
            }
            const localVarPath = `/property/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specified datasheet property definition.
         * @summary Get Datasheet Property
         * @param {string} id Unique id of the datasheet property resource.
         * @param {string} version Version of the datasheet property resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyVersion: async (id: string, version: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPropertyVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getPropertyVersion.');
            }
            const localVarPath = `/property/{id}/v/{version}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndPointsApi - functional programming interface
 * @export
 */
export const EndPointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new feature resource.
         * @summary Create Feature
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {FeatureBody} [featureBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeature(xINSHURTenant?: Tenant, featureBody?: FeatureBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).createFeature(xINSHURTenant, featureBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new feature version resource.  The version is automatically calculated from the latest version.  TBC how to control a major or minor bump. 
         * @summary Create Feature Version
         * @param {string} id Unique id of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {FeatureBody} [featureBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeatureVersion(id: string, xINSHURTenant?: Tenant, featureBody?: FeatureBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).createFeatureVersion(id, xINSHURTenant, featureBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new datasheet property configuration.
         * @summary Create Datasheet Property
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {DatasheetPropertyBody} [datasheetPropertyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProperty(xINSHURTenant?: Tenant, datasheetPropertyBody?: DatasheetPropertyBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasheetProperty>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).createProperty(xINSHURTenant, datasheetPropertyBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new datasheet property version.  The version number is automatically calculated from the latest version. 
         * @summary Create Datasheet Property Version
         * @param {string} id Unique id of the datasheet property resource.
         * @param {DatasheetPropertyBody} [datasheetPropertyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyFromLatestVersion(id: string, datasheetPropertyBody?: DatasheetPropertyBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasheetProperty>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).createPropertyFromLatestVersion(id, datasheetPropertyBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the specified feature resource.  NOTE: will only allow the delete if the feature is not in use on any product. 
         * @summary Delete Feature
         * @param {string} id Unique id of the feature resource.
         * @param {string} version Version of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeature(id: string, version: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).deleteFeature(id, version, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the specified datasheet property resource.  NOTE: will only allow the delete if the property is not reference by any Feature, RatingAlgorithm or DocumentType. 
         * @summary Delete Datasheet Property
         * @param {string} id Unique id of the datasheet property resource.
         * @param {string} version Version of the datasheet property resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyVersion(id: string, version: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).deletePropertyVersion(id, version, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of all versions of all datasheet properties. Optional filter by feature. No pagination currently available on this endpoint. 
         * @summary List Datasheet Properties
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {string} [featureId] Unique id of the feature resource.
         * @param {string} [featureVersion] Version of the feature resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasheetProperties(xINSHURTenant?: Tenant, featureId?: string, featureVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyCollectionModel>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getDatasheetProperties(xINSHURTenant, featureId, featureVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the specified feature definition.
         * @summary Get Feature
         * @param {string} id Unique id of the feature resource.
         * @param {string} version Version of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeature(id: string, version: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getFeature(id, version, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the latest version of a feature definition.
         * @summary Get Feature Version (latest version)
         * @param {string} id Unique id of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureLatest(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getFeatureLatest(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all feature configurations
         * @summary List Features
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatures(xINSHURTenant?: Tenant, size?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturePagedModel>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getFeatures(xINSHURTenant, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the latest version of a datasheet property resource
         * @summary Get Datasheet Property (latest version)
         * @param {string} id Unique id of the datasheet property resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestPropertyVersion(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasheetProperty>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getLatestPropertyVersion(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getMetadata(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the specified datasheet property definition.
         * @summary Get Datasheet Property
         * @param {string} id Unique id of the datasheet property resource.
         * @param {string} version Version of the datasheet property resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPropertyVersion(id: string, version: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasheetProperty>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getPropertyVersion(id, version, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EndPointsApi - factory interface
 * @export
 */
export const EndPointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new feature resource.
         * @summary Create Feature
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {FeatureBody} [featureBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeature(xINSHURTenant?: Tenant, featureBody?: FeatureBody, options?: any): AxiosPromise<Feature> {
            return EndPointsApiFp(configuration).createFeature(xINSHURTenant, featureBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new feature version resource.  The version is automatically calculated from the latest version.  TBC how to control a major or minor bump. 
         * @summary Create Feature Version
         * @param {string} id Unique id of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {FeatureBody} [featureBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureVersion(id: string, xINSHURTenant?: Tenant, featureBody?: FeatureBody, options?: any): AxiosPromise<Feature> {
            return EndPointsApiFp(configuration).createFeatureVersion(id, xINSHURTenant, featureBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new datasheet property configuration.
         * @summary Create Datasheet Property
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {DatasheetPropertyBody} [datasheetPropertyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProperty(xINSHURTenant?: Tenant, datasheetPropertyBody?: DatasheetPropertyBody, options?: any): AxiosPromise<DatasheetProperty> {
            return EndPointsApiFp(configuration).createProperty(xINSHURTenant, datasheetPropertyBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new datasheet property version.  The version number is automatically calculated from the latest version. 
         * @summary Create Datasheet Property Version
         * @param {string} id Unique id of the datasheet property resource.
         * @param {DatasheetPropertyBody} [datasheetPropertyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyFromLatestVersion(id: string, datasheetPropertyBody?: DatasheetPropertyBody, options?: any): AxiosPromise<DatasheetProperty> {
            return EndPointsApiFp(configuration).createPropertyFromLatestVersion(id, datasheetPropertyBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified feature resource.  NOTE: will only allow the delete if the feature is not in use on any product. 
         * @summary Delete Feature
         * @param {string} id Unique id of the feature resource.
         * @param {string} version Version of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeature(id: string, version: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<void> {
            return EndPointsApiFp(configuration).deleteFeature(id, version, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified datasheet property resource.  NOTE: will only allow the delete if the property is not reference by any Feature, RatingAlgorithm or DocumentType. 
         * @summary Delete Datasheet Property
         * @param {string} id Unique id of the datasheet property resource.
         * @param {string} version Version of the datasheet property resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyVersion(id: string, version: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<void> {
            return EndPointsApiFp(configuration).deletePropertyVersion(id, version, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all versions of all datasheet properties. Optional filter by feature. No pagination currently available on this endpoint. 
         * @summary List Datasheet Properties
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {string} [featureId] Unique id of the feature resource.
         * @param {string} [featureVersion] Version of the feature resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasheetProperties(xINSHURTenant?: Tenant, featureId?: string, featureVersion?: string, options?: any): AxiosPromise<PropertyCollectionModel> {
            return EndPointsApiFp(configuration).getDatasheetProperties(xINSHURTenant, featureId, featureVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specified feature definition.
         * @summary Get Feature
         * @param {string} id Unique id of the feature resource.
         * @param {string} version Version of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeature(id: string, version: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Feature> {
            return EndPointsApiFp(configuration).getFeature(id, version, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the latest version of a feature definition.
         * @summary Get Feature Version (latest version)
         * @param {string} id Unique id of the feature resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureLatest(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Feature> {
            return EndPointsApiFp(configuration).getFeatureLatest(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * List all feature configurations
         * @summary List Features
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatures(xINSHURTenant?: Tenant, size?: number, page?: number, options?: any): AxiosPromise<FeaturePagedModel> {
            return EndPointsApiFp(configuration).getFeatures(xINSHURTenant, size, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the latest version of a datasheet property resource
         * @summary Get Datasheet Property (latest version)
         * @param {string} id Unique id of the datasheet property resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestPropertyVersion(id: string, options?: any): AxiosPromise<DatasheetProperty> {
            return EndPointsApiFp(configuration).getLatestPropertyVersion(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(options?: any): AxiosPromise<{ [key: string]: object; }> {
            return EndPointsApiFp(configuration).getMetadata(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specified datasheet property definition.
         * @summary Get Datasheet Property
         * @param {string} id Unique id of the datasheet property resource.
         * @param {string} version Version of the datasheet property resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyVersion(id: string, version: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<DatasheetProperty> {
            return EndPointsApiFp(configuration).getPropertyVersion(id, version, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndPointsApi - object-oriented interface
 * @export
 * @class EndPointsApi
 * @extends {BaseAPI}
 */
export class EndPointsApi extends BaseAPI {
    /**
     * Creates a new feature resource.
     * @summary Create Feature
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {FeatureBody} [featureBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public createFeature(xINSHURTenant?: Tenant, featureBody?: FeatureBody, options?: any) {
        return EndPointsApiFp(this.configuration).createFeature(xINSHURTenant, featureBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new feature version resource.  The version is automatically calculated from the latest version.  TBC how to control a major or minor bump. 
     * @summary Create Feature Version
     * @param {string} id Unique id of the feature resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {FeatureBody} [featureBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public createFeatureVersion(id: string, xINSHURTenant?: Tenant, featureBody?: FeatureBody, options?: any) {
        return EndPointsApiFp(this.configuration).createFeatureVersion(id, xINSHURTenant, featureBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new datasheet property configuration.
     * @summary Create Datasheet Property
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {DatasheetPropertyBody} [datasheetPropertyBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public createProperty(xINSHURTenant?: Tenant, datasheetPropertyBody?: DatasheetPropertyBody, options?: any) {
        return EndPointsApiFp(this.configuration).createProperty(xINSHURTenant, datasheetPropertyBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new datasheet property version.  The version number is automatically calculated from the latest version. 
     * @summary Create Datasheet Property Version
     * @param {string} id Unique id of the datasheet property resource.
     * @param {DatasheetPropertyBody} [datasheetPropertyBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public createPropertyFromLatestVersion(id: string, datasheetPropertyBody?: DatasheetPropertyBody, options?: any) {
        return EndPointsApiFp(this.configuration).createPropertyFromLatestVersion(id, datasheetPropertyBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified feature resource.  NOTE: will only allow the delete if the feature is not in use on any product. 
     * @summary Delete Feature
     * @param {string} id Unique id of the feature resource.
     * @param {string} version Version of the feature resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public deleteFeature(id: string, version: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).deleteFeature(id, version, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified datasheet property resource.  NOTE: will only allow the delete if the property is not reference by any Feature, RatingAlgorithm or DocumentType. 
     * @summary Delete Datasheet Property
     * @param {string} id Unique id of the datasheet property resource.
     * @param {string} version Version of the datasheet property resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public deletePropertyVersion(id: string, version: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).deletePropertyVersion(id, version, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all versions of all datasheet properties. Optional filter by feature. No pagination currently available on this endpoint. 
     * @summary List Datasheet Properties
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {string} [featureId] Unique id of the feature resource.
     * @param {string} [featureVersion] Version of the feature resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getDatasheetProperties(xINSHURTenant?: Tenant, featureId?: string, featureVersion?: string, options?: any) {
        return EndPointsApiFp(this.configuration).getDatasheetProperties(xINSHURTenant, featureId, featureVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the specified feature definition.
     * @summary Get Feature
     * @param {string} id Unique id of the feature resource.
     * @param {string} version Version of the feature resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getFeature(id: string, version: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).getFeature(id, version, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the latest version of a feature definition.
     * @summary Get Feature Version (latest version)
     * @param {string} id Unique id of the feature resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getFeatureLatest(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).getFeatureLatest(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all feature configurations
     * @summary List Features
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {number} [size] Page size.
     * @param {number} [page] Page number. Zero-based page index. Default 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getFeatures(xINSHURTenant?: Tenant, size?: number, page?: number, options?: any) {
        return EndPointsApiFp(this.configuration).getFeatures(xINSHURTenant, size, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the latest version of a datasheet property resource
     * @summary Get Datasheet Property (latest version)
     * @param {string} id Unique id of the datasheet property resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getLatestPropertyVersion(id: string, options?: any) {
        return EndPointsApiFp(this.configuration).getLatestPropertyVersion(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
     * @summary Service Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getMetadata(options?: any) {
        return EndPointsApiFp(this.configuration).getMetadata(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the specified datasheet property definition.
     * @summary Get Datasheet Property
     * @param {string} id Unique id of the datasheet property resource.
     * @param {string} version Version of the datasheet property resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getPropertyVersion(id: string, version: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).getPropertyVersion(id, version, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

}



// tslint:disable
/**
 * quote-v1
 * Quote API Schema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * JSON API message.
 * @export
 * @interface ApiMessage
 */
export interface ApiMessage {
    /**
     * HTTP status code.
     * @type {number}
     * @memberof ApiMessage
     */
    status?: number;
    /**
     * HTTP status text.
     * @type {string}
     * @memberof ApiMessage
     */
    error?: string;
    /**
     * Custom message.
     * @type {string}
     * @memberof ApiMessage
     */
    message?: string;
}
/**
 * Collection of one or more coverage offers.
 * @export
 * @interface BasePackage
 */
export interface BasePackage {
    /**
     * Unique identifier for the package. Must be unique within the owning product.
     * @type {string}
     * @memberof BasePackage
     */
    packageId: string;
    /**
     * Name of the coverage package.
     * @type {string}
     * @memberof BasePackage
     */
    name: string;
}
/**
 * Packaged coverage proposal with specific limit and excess values.
 * @export
 * @interface CoverageOffer
 */
export interface CoverageOffer {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof CoverageOffer
     */
    coverageId: string;
    /**
     * Maximum amount of coverage offered.
     * @type {number}
     * @memberof CoverageOffer
     */
    limit: number;
    /**
     * First portion of the value of a claim that the customer is liable for.
     * @type {number}
     * @memberof CoverageOffer
     */
    excess: number;
    /**
     * Indicates whether the rating engine must consider this coverage in the price calculation. When TRUE, the rating algorithm must define a rating model for this coverage. Default is TRUE.
     * @type {boolean}
     * @memberof CoverageOffer
     */
    rated?: boolean;
}
/**
 * 
 * @export
 * @interface CreatedTrait
 */
export interface CreatedTrait {
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof CreatedTrait
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof CreatedTrait
     */
    createdBy: string;
}
/**
 * Hypermedia link
 * @export
 * @interface HalLink
 */
export interface HalLink {
    /**
     * Hypertext reference
     * @type {string}
     * @memberof HalLink
     */
    href: string;
}
/**
 * 
 * @export
 * @interface HalPageLinks
 */
export interface HalPageLinks {
    /**
     * Link to first page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    first?: HalLink;
    /**
     * Link to next page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    next?: HalLink;
    /**
     * Link to previous page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    prev?: HalLink;
    /**
     * Link to last page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    last?: HalLink;
}
/**
 * HAL/Hypermedia page relations
 * @export
 * @interface HalPageTrait
 */
export interface HalPageTrait {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof HalPageTrait
     */
    _links?: HalPageLinks;
    /**
     * Page metadata.
     * @type {object}
     * @memberof HalPageTrait
     */
    page?: object;
}
/**
 * 
 * @export
 * @interface HalQuoteList
 */
export interface HalQuoteList {
    /**
     * 
     * @type {HalQuoteListEmbedded}
     * @memberof HalQuoteList
     */
    _embedded?: HalQuoteListEmbedded;
}
/**
 * 
 * @export
 * @interface HalQuoteListEmbedded
 */
export interface HalQuoteListEmbedded {
    /**
     * 
     * @type {Array<Quote>}
     * @memberof HalQuoteListEmbedded
     */
    quotes: Array<Quote>;
}
/**
 * HAL/Hypermedia resource charactaristics.
 * @export
 * @interface HalResourceTrait
 */
export interface HalResourceTrait {
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _embedded?: { [key: string]: object; };
}
/**
 * Internal notes relating to the quote. Visible only to authorized callers.
 * @export
 * @interface Observations
 */
export interface Observations {
    /**
     * Reason that the quote was declined. Only returned if the quote status is DECLINED.
     * @type {string}
     * @memberof Observations
     */
    reasonForDecline?: string;
}
/**
 * Collection of one or more coverage offers.
 * @export
 * @interface Package
 */
export interface Package {
    /**
     * Unique identifier for the package. Must be unique within the owning product.
     * @type {string}
     * @memberof Package
     */
    packageId: string;
    /**
     * Name of the coverage package.
     * @type {string}
     * @memberof Package
     */
    name: string;
    /**
     * 
     * @type {Array<CoverageOffer>}
     * @memberof Package
     */
    coverageOffers: Array<CoverageOffer>;
}
/**
 * 
 * @export
 * @interface PackageAllOf
 */
export interface PackageAllOf {
    /**
     * 
     * @type {Array<CoverageOffer>}
     * @memberof PackageAllOf
     */
    coverageOffers?: Array<CoverageOffer>;
}
/**
 * 
 * @export
 * @interface PackageValuation
 */
export interface PackageValuation {
    /**
     * Unique identifier for the package. Must be unique within the owning product.
     * @type {string}
     * @memberof PackageValuation
     */
    packageId: string;
    /**
     * Name of the coverage package.
     * @type {string}
     * @memberof PackageValuation
     */
    name: string;
    /**
     * 
     * @type {Array<CoverageOffer>}
     * @memberof PackageValuation
     */
    coverageOffers: Array<CoverageOffer>;
    /**
     * 
     * @type {Valuation}
     * @memberof PackageValuation
     */
    valuation: Valuation | null;
}
/**
 * 
 * @export
 * @interface PackageValuationAllOf
 */
export interface PackageValuationAllOf {
    /**
     * 
     * @type {Valuation}
     * @memberof PackageValuationAllOf
     */
    valuation?: Valuation | null;
}
/**
 * HAL/Hypermedia Page
 * @export
 * @interface PagedModel
 */
export interface PagedModel {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof PagedModel
     */
    _links: HalPageLinks;
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof PagedModel
     */
    _embedded?: { [key: string]: object; };
    /**
     * Page metadata.
     * @type {object}
     * @memberof PagedModel
     */
    page?: object;
}
/**
 * Reference to a policy resource
 * @export
 * @interface PolicyKey
 */
export interface PolicyKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof PolicyKey
     */
    policyId: string;
}
/**
 * Reference to a product resource.
 * @export
 * @interface ProductKey
 */
export interface ProductKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof ProductKey
     */
    productId: string;
    /**
     * Major.Minor version number.
     * @type {string}
     * @memberof ProductKey
     */
    version: string;
}
/**
 * 
 * @export
 * @interface Quote
 */
export interface Quote {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof Quote
     */
    quoteId: string;
    /**
     * Customer Policy Number.
     * @type {string}
     * @memberof Quote
     */
    quoteNumber: string;
    /**
     * 
     * @type {ProductKey}
     * @memberof Quote
     */
    product: ProductKey;
    /**
     * Unique identifier for a user (defined by Auth0)
     * @type {string}
     * @memberof Quote
     */
    userId: string;
    /**
     * Status of the quote. \'OK\' or \'DECLINED\'
     * @type {string}
     * @memberof Quote
     */
    status: QuoteStatusEnum;
    /**
     * Dynamic datasheet object holding customer data for a quote and policy.
     * @type {{ [key: string]: object; }}
     * @memberof Quote
     */
    datasheet: { [key: string]: object; };
    /**
     * 
     * @type {Array<PackageValuation>}
     * @memberof Quote
     */
    packageValuations: Array<PackageValuation>;
    /**
     * Date time after which this quote expires.
     * @type {string}
     * @memberof Quote
     */
    validUntil: string;
    /**
     * Optional reference to the sanctions screening search result. Only set if sanctions screening is enabled on the product.
     * @type {SearchKey}
     * @memberof Quote
     */
    sanctionsScreeningSearch?: SearchKey;
    /**
     * Optional. Reference to the existing policy if this is a quote for a renewal.
     * @type {PolicyKey}
     * @memberof Quote
     */
    renewalOf?: PolicyKey;
    /**
     * Calculated expected policy start date time.
     * @type {string}
     * @memberof Quote
     */
    provisionalPolicyStartDateTime?: string;
    /**
     * Calculated expected policy end date time.
     * @type {string}
     * @memberof Quote
     */
    provisionalPolicyEndDateTime?: string;
    /**
     * 
     * @type {Observations}
     * @memberof Quote
     */
    observations?: Observations;
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof Quote
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof Quote
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof Quote
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof Quote
     */
    _embedded?: { [key: string]: object; };
}

/**
    * @export
    * @enum {string}
    */
export enum QuoteStatusEnum {
    OK = 'OK',
    DECLINED = 'DECLINED'
}

/**
 * Core quote resource data
 * @export
 * @interface QuoteBody
 */
export interface QuoteBody {
    /**
     * Customer Policy Number.
     * @type {string}
     * @memberof QuoteBody
     */
    quoteNumber: string;
    /**
     * 
     * @type {ProductKey}
     * @memberof QuoteBody
     */
    product: ProductKey;
    /**
     * Unique identifier for a user (defined by Auth0)
     * @type {string}
     * @memberof QuoteBody
     */
    userId: string;
    /**
     * Status of the quote. \'OK\' or \'DECLINED\'
     * @type {string}
     * @memberof QuoteBody
     */
    status: QuoteBodyStatusEnum;
    /**
     * Dynamic datasheet object holding customer data for a quote and policy.
     * @type {{ [key: string]: object; }}
     * @memberof QuoteBody
     */
    datasheet: { [key: string]: object; };
    /**
     * 
     * @type {Array<PackageValuation>}
     * @memberof QuoteBody
     */
    packageValuations: Array<PackageValuation>;
    /**
     * Date time after which this quote expires.
     * @type {string}
     * @memberof QuoteBody
     */
    validUntil: string;
    /**
     * Optional reference to the sanctions screening search result. Only set if sanctions screening is enabled on the product.
     * @type {SearchKey}
     * @memberof QuoteBody
     */
    sanctionsScreeningSearch?: SearchKey;
    /**
     * Optional. Reference to the existing policy if this is a quote for a renewal.
     * @type {PolicyKey}
     * @memberof QuoteBody
     */
    renewalOf?: PolicyKey;
    /**
     * Calculated expected policy start date time.
     * @type {string}
     * @memberof QuoteBody
     */
    provisionalPolicyStartDateTime?: string;
    /**
     * Calculated expected policy end date time.
     * @type {string}
     * @memberof QuoteBody
     */
    provisionalPolicyEndDateTime?: string;
    /**
     * 
     * @type {Observations}
     * @memberof QuoteBody
     */
    observations?: Observations;
}

/**
    * @export
    * @enum {string}
    */
export enum QuoteBodyStatusEnum {
    OK = 'OK',
    DECLINED = 'DECLINED'
}

/**
 * Reference to a quote resource
 * @export
 * @interface QuoteKey
 */
export interface QuoteKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof QuoteKey
     */
    quoteId: string;
}
/**
 * Page of Quote resources
 * @export
 * @interface QuotePagedModel
 */
export interface QuotePagedModel {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof QuotePagedModel
     */
    _links: HalPageLinks;
    /**
     * 
     * @type {HalQuoteListEmbedded}
     * @memberof QuotePagedModel
     */
    _embedded?: HalQuoteListEmbedded;
    /**
     * Page metadata.
     * @type {object}
     * @memberof QuotePagedModel
     */
    page?: object;
}
/**
 * Quote request body
 * @export
 * @interface QuoteRequest
 */
export interface QuoteRequest {
    /**
     * 
     * @type {ProductKey}
     * @memberof QuoteRequest
     */
    product: ProductKey;
    /**
     * Unique identifier for a user (defined by Auth0)
     * @type {string}
     * @memberof QuoteRequest
     */
    userId: string;
    /**
     * Optional. Reference to the existing policy if this is a quote for a renewal.
     * @type {PolicyKey}
     * @memberof QuoteRequest
     */
    renewalOf?: PolicyKey;
    /**
     * Dynamic datasheet object holding customer data for a quote and policy.
     * @type {{ [key: string]: object; }}
     * @memberof QuoteRequest
     */
    datasheet: { [key: string]: object; };
}
/**
 * Reference to a rating resource
 * @export
 * @interface RatingKey
 */
export interface RatingKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof RatingKey
     */
    ratingId: string;
}
/**
 * Resource with HAL/Hypermedia support
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof Resource
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof Resource
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof Resource
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof Resource
     */
    _embedded?: { [key: string]: object; };
}
/**
 * Reference to a search result resource.
 * @export
 * @interface SearchKey
 */
export interface SearchKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof SearchKey
     */
    searchId: string;
}
/**
 * Related platform tenant.
 * @export
 * @enum {string}
 */
export enum Tenant {
    INSHUR = 'INSHUR'
}

/**
 * 
 * @export
 * @interface Valuation
 */
export interface Valuation {
    /**
     * 
     * @type {RatingKey}
     * @memberof Valuation
     */
    rating: RatingKey;
    /**
     * Zero-decimal currency. Price for the related insurance item excluding taxes.
     * @type {number}
     * @memberof Valuation
     */
    premium: number | null;
    /**
     * Zero-decimal currency. Tax amount to be applied to this insurance item.
     * @type {number}
     * @memberof Valuation
     */
    tax: number | null;
    /**
     * Zero-decimal currency. Total price for the related insurance item including taxes.
     * @type {number}
     * @memberof Valuation
     */
    total: number | null;
}

/**
 * EndPointsApi - axios parameter creator
 * @export
 */
export const EndPointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new quote resource.
         * @summary Generate Quote
         * @param {QuoteRequest} quoteRequest 
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuote: async (quoteRequest: QuoteRequest, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteRequest' is not null or undefined
            if (quoteRequest === null || quoteRequest === undefined) {
                throw new RequiredError('quoteRequest','Required parameter quoteRequest was null or undefined when calling createQuote.');
            }
            const localVarPath = `/quote`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof quoteRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(quoteRequest !== undefined ? quoteRequest : {}) : (quoteRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified quote.  NOTE: will only allow the delete if the quote is not linked to any policy. 
         * @summary Delete Quote
         * @param {string} id Unique id of the quote resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuote: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteQuote.');
            }
            const localVarPath = `/quote/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates any missing quote documents.
         * @summary Generate Quote Documents
         * @param {string} id Unique id of the quote resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQuoteDocuments: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling generateQuoteDocuments.');
            }
            const localVarPath = `/quote/{id}/documents`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specified quote resource.
         * @summary Retrieve Quote
         * @param {string} id Unique id of the quote resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuote: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getQuote.');
            }
            const localVarPath = `/quote/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all quotes with optional filters.
         * @summary List Quotes
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [sort] Order the results. Eg. sort&#x3D;quoteNumber or sort&#x3D;datasheet.insured.dob,datasheet.insured.lastName,asc
         * @param {string} [productId] Unique id of the product resource.
         * @param {string} [productVersion] Version of the product resource.
         * @param {string} [userId] Filter by userId (owning user).
         * @param {boolean} [excludeExpired] Ignore expired quotes.
         * @param {string} [fuzzyMatch] Filter by partial, non-case-senstive match on quoteNumber, registrationNumber or insuredLastName.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuotes: async (xINSHURTenant?: Tenant, size?: number, page?: number, sort?: string, productId?: string, productVersion?: string, userId?: string, excludeExpired?: boolean, fuzzyMatch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/quotes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (productVersion !== undefined) {
                localVarQueryParameter['productVersion'] = productVersion;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (excludeExpired !== undefined) {
                localVarQueryParameter['excludeExpired'] = excludeExpired;
            }

            if (fuzzyMatch !== undefined) {
                localVarQueryParameter['fuzzyMatch'] = fuzzyMatch;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Overrides the quote validUntil date.  **For use in system testing only.**  Use with caution. 
         * @summary Shift Quote Validity
         * @param {string} id Ref to the policy to update.
         * @param {string} validUntil New quote validUntil time
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchQuoteDateShift: async (id: string, validUntil: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchQuoteDateShift.');
            }
            // verify required parameter 'validUntil' is not null or undefined
            if (validUntil === null || validUntil === undefined) {
                throw new RequiredError('validUntil','Required parameter validUntil was null or undefined when calling patchQuoteDateShift.');
            }
            const localVarPath = `/quote/{id}/date-shift`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (validUntil !== undefined) {
                localVarQueryParameter['validUntil'] = (validUntil as any instanceof Date) ?
                    (validUntil as any).toISOString() :
                    validUntil;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndPointsApi - functional programming interface
 * @export
 */
export const EndPointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new quote resource.
         * @summary Generate Quote
         * @param {QuoteRequest} quoteRequest 
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuote(quoteRequest: QuoteRequest, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quote>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).createQuote(quoteRequest, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the specified quote.  NOTE: will only allow the delete if the quote is not linked to any policy. 
         * @summary Delete Quote
         * @param {string} id Unique id of the quote resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuote(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).deleteQuote(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Generates any missing quote documents.
         * @summary Generate Quote Documents
         * @param {string} id Unique id of the quote resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateQuoteDocuments(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).generateQuoteDocuments(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getMetadata(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the specified quote resource.
         * @summary Retrieve Quote
         * @param {string} id Unique id of the quote resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuote(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quote>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getQuote(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all quotes with optional filters.
         * @summary List Quotes
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [sort] Order the results. Eg. sort&#x3D;quoteNumber or sort&#x3D;datasheet.insured.dob,datasheet.insured.lastName,asc
         * @param {string} [productId] Unique id of the product resource.
         * @param {string} [productVersion] Version of the product resource.
         * @param {string} [userId] Filter by userId (owning user).
         * @param {boolean} [excludeExpired] Ignore expired quotes.
         * @param {string} [fuzzyMatch] Filter by partial, non-case-senstive match on quoteNumber, registrationNumber or insuredLastName.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuotes(xINSHURTenant?: Tenant, size?: number, page?: number, sort?: string, productId?: string, productVersion?: string, userId?: string, excludeExpired?: boolean, fuzzyMatch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotePagedModel>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getQuotes(xINSHURTenant, size, page, sort, productId, productVersion, userId, excludeExpired, fuzzyMatch, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Overrides the quote validUntil date.  **For use in system testing only.**  Use with caution. 
         * @summary Shift Quote Validity
         * @param {string} id Ref to the policy to update.
         * @param {string} validUntil New quote validUntil time
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchQuoteDateShift(id: string, validUntil: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quote>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).patchQuoteDateShift(id, validUntil, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EndPointsApi - factory interface
 * @export
 */
export const EndPointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new quote resource.
         * @summary Generate Quote
         * @param {QuoteRequest} quoteRequest 
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuote(quoteRequest: QuoteRequest, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Quote> {
            return EndPointsApiFp(configuration).createQuote(quoteRequest, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified quote.  NOTE: will only allow the delete if the quote is not linked to any policy. 
         * @summary Delete Quote
         * @param {string} id Unique id of the quote resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuote(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<void> {
            return EndPointsApiFp(configuration).deleteQuote(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates any missing quote documents.
         * @summary Generate Quote Documents
         * @param {string} id Unique id of the quote resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQuoteDocuments(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<void> {
            return EndPointsApiFp(configuration).generateQuoteDocuments(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(options?: any): AxiosPromise<{ [key: string]: object; }> {
            return EndPointsApiFp(configuration).getMetadata(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specified quote resource.
         * @summary Retrieve Quote
         * @param {string} id Unique id of the quote resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuote(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Quote> {
            return EndPointsApiFp(configuration).getQuote(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all quotes with optional filters.
         * @summary List Quotes
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [sort] Order the results. Eg. sort&#x3D;quoteNumber or sort&#x3D;datasheet.insured.dob,datasheet.insured.lastName,asc
         * @param {string} [productId] Unique id of the product resource.
         * @param {string} [productVersion] Version of the product resource.
         * @param {string} [userId] Filter by userId (owning user).
         * @param {boolean} [excludeExpired] Ignore expired quotes.
         * @param {string} [fuzzyMatch] Filter by partial, non-case-senstive match on quoteNumber, registrationNumber or insuredLastName.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuotes(xINSHURTenant?: Tenant, size?: number, page?: number, sort?: string, productId?: string, productVersion?: string, userId?: string, excludeExpired?: boolean, fuzzyMatch?: string, options?: any): AxiosPromise<QuotePagedModel> {
            return EndPointsApiFp(configuration).getQuotes(xINSHURTenant, size, page, sort, productId, productVersion, userId, excludeExpired, fuzzyMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Overrides the quote validUntil date.  **For use in system testing only.**  Use with caution. 
         * @summary Shift Quote Validity
         * @param {string} id Ref to the policy to update.
         * @param {string} validUntil New quote validUntil time
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchQuoteDateShift(id: string, validUntil: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Quote> {
            return EndPointsApiFp(configuration).patchQuoteDateShift(id, validUntil, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndPointsApi - object-oriented interface
 * @export
 * @class EndPointsApi
 * @extends {BaseAPI}
 */
export class EndPointsApi extends BaseAPI {
    /**
     * Creates a new quote resource.
     * @summary Generate Quote
     * @param {QuoteRequest} quoteRequest 
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public createQuote(quoteRequest: QuoteRequest, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).createQuote(quoteRequest, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified quote.  NOTE: will only allow the delete if the quote is not linked to any policy. 
     * @summary Delete Quote
     * @param {string} id Unique id of the quote resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public deleteQuote(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).deleteQuote(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates any missing quote documents.
     * @summary Generate Quote Documents
     * @param {string} id Unique id of the quote resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public generateQuoteDocuments(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).generateQuoteDocuments(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
     * @summary Service Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getMetadata(options?: any) {
        return EndPointsApiFp(this.configuration).getMetadata(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the specified quote resource.
     * @summary Retrieve Quote
     * @param {string} id Unique id of the quote resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getQuote(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).getQuote(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all quotes with optional filters.
     * @summary List Quotes
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {number} [size] Page size.
     * @param {number} [page] Page number. Zero-based page index. Default 0.
     * @param {string} [sort] Order the results. Eg. sort&#x3D;quoteNumber or sort&#x3D;datasheet.insured.dob,datasheet.insured.lastName,asc
     * @param {string} [productId] Unique id of the product resource.
     * @param {string} [productVersion] Version of the product resource.
     * @param {string} [userId] Filter by userId (owning user).
     * @param {boolean} [excludeExpired] Ignore expired quotes.
     * @param {string} [fuzzyMatch] Filter by partial, non-case-senstive match on quoteNumber, registrationNumber or insuredLastName.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getQuotes(xINSHURTenant?: Tenant, size?: number, page?: number, sort?: string, productId?: string, productVersion?: string, userId?: string, excludeExpired?: boolean, fuzzyMatch?: string, options?: any) {
        return EndPointsApiFp(this.configuration).getQuotes(xINSHURTenant, size, page, sort, productId, productVersion, userId, excludeExpired, fuzzyMatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overrides the quote validUntil date.  **For use in system testing only.**  Use with caution. 
     * @summary Shift Quote Validity
     * @param {string} id Ref to the policy to update.
     * @param {string} validUntil New quote validUntil time
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public patchQuoteDateShift(id: string, validUntil: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).patchQuoteDateShift(id, validUntil, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

}



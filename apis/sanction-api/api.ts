// tslint:disable
/**
 * sanction-v1
 * Sanction API Schema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * JSON API message.
 * @export
 * @interface ApiMessage
 */
export interface ApiMessage {
    /**
     * HTTP status code.
     * @type {number}
     * @memberof ApiMessage
     */
    status?: number;
    /**
     * HTTP status text.
     * @type {string}
     * @memberof ApiMessage
     */
    error?: string;
    /**
     * Custom message.
     * @type {string}
     * @memberof ApiMessage
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface CreatedTrait
 */
export interface CreatedTrait {
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof CreatedTrait
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof CreatedTrait
     */
    createdBy: string;
}
/**
 * Hypermedia link
 * @export
 * @interface HalLink
 */
export interface HalLink {
    /**
     * Hypertext reference
     * @type {string}
     * @memberof HalLink
     */
    href: string;
}
/**
 * 
 * @export
 * @interface HalPageLinks
 */
export interface HalPageLinks {
    /**
     * Link to first page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    first?: HalLink;
    /**
     * Link to next page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    next?: HalLink;
    /**
     * Link to previous page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    prev?: HalLink;
    /**
     * Link to last page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    last?: HalLink;
}
/**
 * HAL/Hypermedia page relations
 * @export
 * @interface HalPageTrait
 */
export interface HalPageTrait {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof HalPageTrait
     */
    _links?: HalPageLinks;
    /**
     * Page metadata.
     * @type {object}
     * @memberof HalPageTrait
     */
    page?: object;
}
/**
 * HAL/Hypermedia resource charactaristics.
 * @export
 * @interface HalResourceTrait
 */
export interface HalResourceTrait {
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _embedded?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface HalSearchList
 */
export interface HalSearchList {
    /**
     * 
     * @type {HalSearchListEmbedded}
     * @memberof HalSearchList
     */
    _embedded?: HalSearchListEmbedded;
}
/**
 * 
 * @export
 * @interface HalSearchListEmbedded
 */
export interface HalSearchListEmbedded {
    /**
     * 
     * @type {Array<Search>}
     * @memberof HalSearchListEmbedded
     */
    searches: Array<Search>;
}
/**
 * HAL/Hypermedia Page
 * @export
 * @interface PagedModel
 */
export interface PagedModel {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof PagedModel
     */
    _links: HalPageLinks;
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof PagedModel
     */
    _embedded?: { [key: string]: object; };
    /**
     * Page metadata.
     * @type {object}
     * @memberof PagedModel
     */
    page?: object;
}
/**
 * Reference to a product resource.
 * @export
 * @interface ProductKey
 */
export interface ProductKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof ProductKey
     */
    productId: string;
    /**
     * Major.Minor version number.
     * @type {string}
     * @memberof ProductKey
     */
    version: string;
}
/**
 * Resource with HAL/Hypermedia support
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof Resource
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof Resource
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof Resource
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof Resource
     */
    _embedded?: { [key: string]: object; };
}
/**
 * Sanctions screening service provider
 * @export
 * @enum {string}
 */
export enum SanctionProvider {
    OFAC = 'OFAC'
}

/**
 * Search result resource
 * @export
 * @interface Search
 */
export interface Search {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof Search
     */
    searchId: string;
    /**
     * 
     * @type {ProductKey}
     * @memberof Search
     */
    product: ProductKey;
    /**
     * Unique identifier for a user (defined by Auth0)
     * @type {string}
     * @memberof Search
     */
    userId: string;
    /**
     * 
     * @type {SanctionProvider}
     * @memberof Search
     */
    sanctionProvider: SanctionProvider;
    /**
     * Result of the search  * MATCHED - The details provided matched to one or more entries on the providers screening list(s).  * UNMATCHED - The details provided did NOT match to any entries on the providers screening list(s).  * UNKNOWN - A result could not be determined likely due to a search failure. 
     * @type {string}
     * @memberof Search
     */
    searchResult: SearchSearchResultEnum;
    /**
     * Context data returned by the executor function after processing.
     * @type {object}
     * @memberof Search
     */
    data: object | null;
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof Search
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof Search
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof Search
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof Search
     */
    _embedded?: { [key: string]: object; };
}

/**
    * @export
    * @enum {string}
    */
export enum SearchSearchResultEnum {
    MATCHED = 'MATCHED',
    UNMATCHED = 'UNMATCHED',
    UNKNOWN = 'UNKNOWN'
}

/**
 * Subject address to search
 * @export
 * @interface SearchAddress
 */
export interface SearchAddress {
    /**
     * 
     * @type {string}
     * @memberof SearchAddress
     */
    addressLine1?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchAddress
     */
    addressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchAddress
     */
    addressLine3?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchAddress
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchAddress
     */
    county?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchAddress
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchAddress
     */
    province?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchAddress
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchAddress
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchAddress
     */
    country?: string;
}
/**
 * Search result core data.
 * @export
 * @interface SearchBody
 */
export interface SearchBody {
    /**
     * 
     * @type {ProductKey}
     * @memberof SearchBody
     */
    product: ProductKey;
    /**
     * Unique identifier for a user (defined by Auth0)
     * @type {string}
     * @memberof SearchBody
     */
    userId: string;
    /**
     * 
     * @type {SanctionProvider}
     * @memberof SearchBody
     */
    sanctionProvider: SanctionProvider;
    /**
     * Result of the search  * MATCHED - The details provided matched to one or more entries on the providers screening list(s).  * UNMATCHED - The details provided did NOT match to any entries on the providers screening list(s).  * UNKNOWN - A result could not be determined likely due to a search failure. 
     * @type {string}
     * @memberof SearchBody
     */
    searchResult: SearchBodySearchResultEnum;
    /**
     * Context data returned by the executor function after processing.
     * @type {object}
     * @memberof SearchBody
     */
    data: object | null;
}

/**
    * @export
    * @enum {string}
    */
export enum SearchBodySearchResultEnum {
    MATCHED = 'MATCHED',
    UNMATCHED = 'UNMATCHED',
    UNKNOWN = 'UNKNOWN'
}

/**
 * Reference to a search result resource.
 * @export
 * @interface SearchKey
 */
export interface SearchKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof SearchKey
     */
    searchId: string;
}
/**
 * Subject name to search
 * @export
 * @interface SearchName
 */
export interface SearchName {
    /**
     * 
     * @type {string}
     * @memberof SearchName
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchName
     */
    lastName?: string;
}
/**
 * Page of Search resources
 * @export
 * @interface SearchPagedModel
 */
export interface SearchPagedModel {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof SearchPagedModel
     */
    _links: HalPageLinks;
    /**
     * 
     * @type {HalSearchListEmbedded}
     * @memberof SearchPagedModel
     */
    _embedded?: HalSearchListEmbedded;
    /**
     * Page metadata.
     * @type {object}
     * @memberof SearchPagedModel
     */
    page?: object;
}
/**
 * Search request body
 * @export
 * @interface SearchRequest
 */
export interface SearchRequest {
    /**
     * 
     * @type {SanctionProvider}
     * @memberof SearchRequest
     */
    provider: SanctionProvider;
    /**
     * 
     * @type {ProductKey}
     * @memberof SearchRequest
     */
    product: ProductKey;
    /**
     * Unique identifier for a user (defined by Auth0)
     * @type {string}
     * @memberof SearchRequest
     */
    userId: string;
    /**
     * 
     * @type {SearchAddress}
     * @memberof SearchRequest
     */
    searchAddress: SearchAddress;
    /**
     * 
     * @type {SearchName}
     * @memberof SearchRequest
     */
    searchName: SearchName;
}
/**
 * Related platform tenant.
 * @export
 * @enum {string}
 */
export enum Tenant {
    INSHUR = 'INSHUR'
}


/**
 * EndPointsApi - axios parameter creator
 * @export
 */
export const EndPointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a paginated dataset of sanctions searches with optional filter by product.
         * @summary List Searches
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [productId] Product reference.
         * @param {string} [version] Product version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doList: async (xINSHURTenant?: Tenant, size?: number, page?: number, productId?: string, version?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/searches`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs a sanctions screening search.
         * @summary Create Search
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {SearchRequest} [searchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doPost: async (xINSHURTenant?: Tenant, searchRequest?: SearchRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof searchRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(searchRequest !== undefined ? searchRequest : {}) : (searchRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns existing sanctions screening search result.
         * @summary Retrieve Search Result
         * @param {string} id Unique id of the search result resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearch: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSearch.');
            }
            const localVarPath = `/search/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndPointsApi - functional programming interface
 * @export
 */
export const EndPointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a paginated dataset of sanctions searches with optional filter by product.
         * @summary List Searches
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [productId] Product reference.
         * @param {string} [version] Product version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doList(xINSHURTenant?: Tenant, size?: number, page?: number, productId?: string, version?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchPagedModel>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).doList(xINSHURTenant, size, page, productId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Performs a sanctions screening search.
         * @summary Create Search
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {SearchRequest} [searchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doPost(xINSHURTenant?: Tenant, searchRequest?: SearchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Search>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).doPost(xINSHURTenant, searchRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getMetadata(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns existing sanctions screening search result.
         * @summary Retrieve Search Result
         * @param {string} id Unique id of the search result resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearch(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Search>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getSearch(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EndPointsApi - factory interface
 * @export
 */
export const EndPointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns a paginated dataset of sanctions searches with optional filter by product.
         * @summary List Searches
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [productId] Product reference.
         * @param {string} [version] Product version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doList(xINSHURTenant?: Tenant, size?: number, page?: number, productId?: string, version?: string, options?: any): AxiosPromise<SearchPagedModel> {
            return EndPointsApiFp(configuration).doList(xINSHURTenant, size, page, productId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs a sanctions screening search.
         * @summary Create Search
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {SearchRequest} [searchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doPost(xINSHURTenant?: Tenant, searchRequest?: SearchRequest, options?: any): AxiosPromise<Search> {
            return EndPointsApiFp(configuration).doPost(xINSHURTenant, searchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(options?: any): AxiosPromise<{ [key: string]: object; }> {
            return EndPointsApiFp(configuration).getMetadata(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns existing sanctions screening search result.
         * @summary Retrieve Search Result
         * @param {string} id Unique id of the search result resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearch(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Search> {
            return EndPointsApiFp(configuration).getSearch(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndPointsApi - object-oriented interface
 * @export
 * @class EndPointsApi
 * @extends {BaseAPI}
 */
export class EndPointsApi extends BaseAPI {
    /**
     * Returns a paginated dataset of sanctions searches with optional filter by product.
     * @summary List Searches
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {number} [size] Page size.
     * @param {number} [page] Page number. Zero-based page index. Default 0.
     * @param {string} [productId] Product reference.
     * @param {string} [version] Product version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public doList(xINSHURTenant?: Tenant, size?: number, page?: number, productId?: string, version?: string, options?: any) {
        return EndPointsApiFp(this.configuration).doList(xINSHURTenant, size, page, productId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs a sanctions screening search.
     * @summary Create Search
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {SearchRequest} [searchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public doPost(xINSHURTenant?: Tenant, searchRequest?: SearchRequest, options?: any) {
        return EndPointsApiFp(this.configuration).doPost(xINSHURTenant, searchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
     * @summary Service Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getMetadata(options?: any) {
        return EndPointsApiFp(this.configuration).getMetadata(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns existing sanctions screening search result.
     * @summary Retrieve Search Result
     * @param {string} id Unique id of the search result resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getSearch(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).getSearch(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

}



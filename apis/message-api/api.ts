// tslint:disable
/**
 * message-v1
 * Message API Service  Handles system-to-human correspondence. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * null
 * @export
 * @interface AdminAlertEmailRequest
 */
export interface AdminAlertEmailRequest {
    /**
     * null
     * @type {string}
     * @memberof AdminAlertEmailRequest
     */
    subject: string;
    /**
     * 
     * @type {string}
     * @memberof AdminAlertEmailRequest
     */
    priority: AdminAlertEmailRequestPriorityEnum;
    /**
     * 
     * @type {string}
     * @memberof AdminAlertEmailRequest
     */
    body: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AdminAlertEmailRequestPriorityEnum {
    HIGH = 'HIGH',
    MEDIUM = 'MEDIUM',
    LOW = 'LOW'
}

/**
 * JSON API message.
 * @export
 * @interface ApiMessage
 */
export interface ApiMessage {
    /**
     * HTTP status code.
     * @type {number}
     * @memberof ApiMessage
     */
    status?: number;
    /**
     * HTTP status text.
     * @type {string}
     * @memberof ApiMessage
     */
    error?: string;
    /**
     * Custom message.
     * @type {string}
     * @memberof ApiMessage
     */
    message?: string;
}
/**
 * null
 * @export
 * @interface PolicyEmailRequest
 */
export interface PolicyEmailRequest {
    /**
     * 
     * @type {PolicyKey}
     * @memberof PolicyEmailRequest
     */
    policy: PolicyKey;
}
/**
 * Reference to a policy resource
 * @export
 * @interface PolicyKey
 */
export interface PolicyKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof PolicyKey
     */
    policyId: string;
}
/**
 * Related platform tenant.
 * @export
 * @enum {string}
 */
export enum Tenant {
    INSHUR = 'INSHUR'
}


/**
 * EndPointsApi - axios parameter creator
 * @export
 */
export const EndPointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates and sends an alert email to the support mail box.
         * @summary Send Alert Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {AdminAlertEmailRequest} [adminAlertEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAdminAlertEmail: async (xINSHURTenant?: Tenant, adminAlertEmailRequest?: AdminAlertEmailRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/admin-alert`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof adminAlertEmailRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(adminAlertEmailRequest !== undefined ? adminAlertEmailRequest : {}) : (adminAlertEmailRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates and sends the new business/welcome email for the specified policy.  Requires role(s): ```admin``` 
         * @summary Send New Business Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {PolicyEmailRequest} [policyEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNewBusinessEmail: async (xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/policy/new-business`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof policyEmailRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(policyEmailRequest !== undefined ? policyEmailRequest : {}) : (policyEmailRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üéÅ **Coming Soon!** üéÅ  Generates and sends the policy cancellation email for the specified policy. 
         * @summary Send Policy Cancellation Notification Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {PolicyEmailRequest} [policyEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPolicyCancellationEmail: async (xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/policy/cancellation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof policyEmailRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(policyEmailRequest !== undefined ? policyEmailRequest : {}) : (policyEmailRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üéÅ **Coming Soon!** üéÅ  Generates and sends the policy expiry reminder email for the specified policy. 
         * @summary Send Policy Expiry Reminder Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {PolicyEmailRequest} [policyEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPolicyExpiryReminderEmail: async (xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/policy/expiry-reminder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof policyEmailRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(policyEmailRequest !== undefined ? policyEmailRequest : {}) : (policyEmailRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndPointsApi - functional programming interface
 * @export
 */
export const EndPointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getMetadata(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Generates and sends an alert email to the support mail box.
         * @summary Send Alert Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {AdminAlertEmailRequest} [adminAlertEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendAdminAlertEmail(xINSHURTenant?: Tenant, adminAlertEmailRequest?: AdminAlertEmailRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).sendAdminAlertEmail(xINSHURTenant, adminAlertEmailRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Generates and sends the new business/welcome email for the specified policy.  Requires role(s): ```admin``` 
         * @summary Send New Business Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {PolicyEmailRequest} [policyEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendNewBusinessEmail(xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).sendNewBusinessEmail(xINSHURTenant, policyEmailRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * üéÅ **Coming Soon!** üéÅ  Generates and sends the policy cancellation email for the specified policy. 
         * @summary Send Policy Cancellation Notification Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {PolicyEmailRequest} [policyEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPolicyCancellationEmail(xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).sendPolicyCancellationEmail(xINSHURTenant, policyEmailRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * üéÅ **Coming Soon!** üéÅ  Generates and sends the policy expiry reminder email for the specified policy. 
         * @summary Send Policy Expiry Reminder Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {PolicyEmailRequest} [policyEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPolicyExpiryReminderEmail(xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).sendPolicyExpiryReminderEmail(xINSHURTenant, policyEmailRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EndPointsApi - factory interface
 * @export
 */
export const EndPointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(options?: any): AxiosPromise<{ [key: string]: object; }> {
            return EndPointsApiFp(configuration).getMetadata(options).then((request) => request(axios, basePath));
        },
        /**
         * Generates and sends an alert email to the support mail box.
         * @summary Send Alert Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {AdminAlertEmailRequest} [adminAlertEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAdminAlertEmail(xINSHURTenant?: Tenant, adminAlertEmailRequest?: AdminAlertEmailRequest, options?: any): AxiosPromise<void> {
            return EndPointsApiFp(configuration).sendAdminAlertEmail(xINSHURTenant, adminAlertEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates and sends the new business/welcome email for the specified policy.  Requires role(s): ```admin``` 
         * @summary Send New Business Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {PolicyEmailRequest} [policyEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNewBusinessEmail(xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options?: any): AxiosPromise<void> {
            return EndPointsApiFp(configuration).sendNewBusinessEmail(xINSHURTenant, policyEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * üéÅ **Coming Soon!** üéÅ  Generates and sends the policy cancellation email for the specified policy. 
         * @summary Send Policy Cancellation Notification Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {PolicyEmailRequest} [policyEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPolicyCancellationEmail(xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options?: any): AxiosPromise<void> {
            return EndPointsApiFp(configuration).sendPolicyCancellationEmail(xINSHURTenant, policyEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * üéÅ **Coming Soon!** üéÅ  Generates and sends the policy expiry reminder email for the specified policy. 
         * @summary Send Policy Expiry Reminder Email
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {PolicyEmailRequest} [policyEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPolicyExpiryReminderEmail(xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options?: any): AxiosPromise<void> {
            return EndPointsApiFp(configuration).sendPolicyExpiryReminderEmail(xINSHURTenant, policyEmailRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndPointsApi - object-oriented interface
 * @export
 * @class EndPointsApi
 * @extends {BaseAPI}
 */
export class EndPointsApi extends BaseAPI {
    /**
     * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
     * @summary Service Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getMetadata(options?: any) {
        return EndPointsApiFp(this.configuration).getMetadata(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates and sends an alert email to the support mail box.
     * @summary Send Alert Email
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {AdminAlertEmailRequest} [adminAlertEmailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public sendAdminAlertEmail(xINSHURTenant?: Tenant, adminAlertEmailRequest?: AdminAlertEmailRequest, options?: any) {
        return EndPointsApiFp(this.configuration).sendAdminAlertEmail(xINSHURTenant, adminAlertEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates and sends the new business/welcome email for the specified policy.  Requires role(s): ```admin``` 
     * @summary Send New Business Email
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {PolicyEmailRequest} [policyEmailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public sendNewBusinessEmail(xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options?: any) {
        return EndPointsApiFp(this.configuration).sendNewBusinessEmail(xINSHURTenant, policyEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üéÅ **Coming Soon!** üéÅ  Generates and sends the policy cancellation email for the specified policy. 
     * @summary Send Policy Cancellation Notification Email
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {PolicyEmailRequest} [policyEmailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public sendPolicyCancellationEmail(xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options?: any) {
        return EndPointsApiFp(this.configuration).sendPolicyCancellationEmail(xINSHURTenant, policyEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üéÅ **Coming Soon!** üéÅ  Generates and sends the policy expiry reminder email for the specified policy. 
     * @summary Send Policy Expiry Reminder Email
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {PolicyEmailRequest} [policyEmailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public sendPolicyExpiryReminderEmail(xINSHURTenant?: Tenant, policyEmailRequest?: PolicyEmailRequest, options?: any) {
        return EndPointsApiFp(this.configuration).sendPolicyExpiryReminderEmail(xINSHURTenant, policyEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

}



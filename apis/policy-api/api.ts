// tslint:disable
/**
 * policy-v1
 * Policy API Schema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * JSON API message.
 * @export
 * @interface ApiMessage
 */
export interface ApiMessage {
    /**
     * HTTP status code.
     * @type {number}
     * @memberof ApiMessage
     */
    status?: number;
    /**
     * HTTP status text.
     * @type {string}
     * @memberof ApiMessage
     */
    error?: string;
    /**
     * Custom message.
     * @type {string}
     * @memberof ApiMessage
     */
    message?: string;
}
/**
 * Collection of one or more coverage offers.
 * @export
 * @interface BasePackage
 */
export interface BasePackage {
    /**
     * Unique identifier for the package. Must be unique within the owning product.
     * @type {string}
     * @memberof BasePackage
     */
    packageId: string;
    /**
     * Name of the coverage package.
     * @type {string}
     * @memberof BasePackage
     */
    name: string;
}
/**
 * Packaged coverage proposal with specific limit and excess values.
 * @export
 * @interface CoverageOffer
 */
export interface CoverageOffer {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof CoverageOffer
     */
    coverageId: string;
    /**
     * Maximum amount of coverage offered.
     * @type {number}
     * @memberof CoverageOffer
     */
    limit: number;
    /**
     * First portion of the value of a claim that the customer is liable for.
     * @type {number}
     * @memberof CoverageOffer
     */
    excess: number;
    /**
     * Indicates whether the rating engine must consider this coverage in the price calculation. When TRUE, the rating algorithm must define a rating model for this coverage. Default is TRUE.
     * @type {boolean}
     * @memberof CoverageOffer
     */
    rated?: boolean;
}
/**
 * 
 * @export
 * @interface CreatedTrait
 */
export interface CreatedTrait {
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof CreatedTrait
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof CreatedTrait
     */
    createdBy: string;
}
/**
 * Hypermedia link
 * @export
 * @interface HalLink
 */
export interface HalLink {
    /**
     * Hypertext reference
     * @type {string}
     * @memberof HalLink
     */
    href: string;
}
/**
 * 
 * @export
 * @interface HalPageLinks
 */
export interface HalPageLinks {
    /**
     * Link to first page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    first?: HalLink;
    /**
     * Link to next page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    next?: HalLink;
    /**
     * Link to previous page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    prev?: HalLink;
    /**
     * Link to last page in the dataset
     * @type {HalLink}
     * @memberof HalPageLinks
     */
    last?: HalLink;
}
/**
 * HAL/Hypermedia page relations
 * @export
 * @interface HalPageTrait
 */
export interface HalPageTrait {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof HalPageTrait
     */
    _links?: HalPageLinks;
    /**
     * Page metadata.
     * @type {object}
     * @memberof HalPageTrait
     */
    page?: object;
}
/**
 * 
 * @export
 * @interface HalPolicyList
 */
export interface HalPolicyList {
    /**
     * 
     * @type {HalPolicyListEmbedded}
     * @memberof HalPolicyList
     */
    _embedded?: HalPolicyListEmbedded;
}
/**
 * 
 * @export
 * @interface HalPolicyListEmbedded
 */
export interface HalPolicyListEmbedded {
    /**
     * 
     * @type {Array<Policy>}
     * @memberof HalPolicyListEmbedded
     */
    policies: Array<Policy>;
}
/**
 * HAL/Hypermedia resource charactaristics.
 * @export
 * @interface HalResourceTrait
 */
export interface HalResourceTrait {
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof HalResourceTrait
     */
    _embedded?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface LastModifiedTrait
 */
export interface LastModifiedTrait {
    /**
     * The UTC date-time stamp that the resource was last updated. Automatically set by the system.
     * @type {string}
     * @memberof LastModifiedTrait
     */
    lastModifiedOn: string;
    /**
     * Reference to the user or service that last updated the resource. Automatically set by the system.
     * @type {string}
     * @memberof LastModifiedTrait
     */
    lastModifiedBy: string;
}
/**
 * Modifiable Resource with HAL/Hypermedia support
 * @export
 * @interface MutableResource
 */
export interface MutableResource {
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof MutableResource
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof MutableResource
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof MutableResource
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof MutableResource
     */
    _embedded?: { [key: string]: object; };
    /**
     * The UTC date-time stamp that the resource was last updated. Automatically set by the system.
     * @type {string}
     * @memberof MutableResource
     */
    lastModifiedOn: string;
    /**
     * Reference to the user or service that last updated the resource. Automatically set by the system.
     * @type {string}
     * @memberof MutableResource
     */
    lastModifiedBy: string;
}
/**
 * Collection of one or more coverage offers.
 * @export
 * @interface Package
 */
export interface Package {
    /**
     * Unique identifier for the package. Must be unique within the owning product.
     * @type {string}
     * @memberof Package
     */
    packageId: string;
    /**
     * Name of the coverage package.
     * @type {string}
     * @memberof Package
     */
    name: string;
    /**
     * 
     * @type {Array<CoverageOffer>}
     * @memberof Package
     */
    coverageOffers: Array<CoverageOffer>;
}
/**
 * 
 * @export
 * @interface PackageAllOf
 */
export interface PackageAllOf {
    /**
     * 
     * @type {Array<CoverageOffer>}
     * @memberof PackageAllOf
     */
    coverageOffers?: Array<CoverageOffer>;
}
/**
 * 
 * @export
 * @interface PackageValuation
 */
export interface PackageValuation {
    /**
     * Unique identifier for the package. Must be unique within the owning product.
     * @type {string}
     * @memberof PackageValuation
     */
    packageId: string;
    /**
     * Name of the coverage package.
     * @type {string}
     * @memberof PackageValuation
     */
    name: string;
    /**
     * 
     * @type {Array<CoverageOffer>}
     * @memberof PackageValuation
     */
    coverageOffers: Array<CoverageOffer>;
    /**
     * 
     * @type {Valuation}
     * @memberof PackageValuation
     */
    valuation: Valuation | null;
}
/**
 * 
 * @export
 * @interface PackageValuationAllOf
 */
export interface PackageValuationAllOf {
    /**
     * 
     * @type {Valuation}
     * @memberof PackageValuationAllOf
     */
    valuation?: Valuation | null;
}
/**
 * HAL/Hypermedia Page
 * @export
 * @interface PagedModel
 */
export interface PagedModel {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof PagedModel
     */
    _links: HalPageLinks;
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof PagedModel
     */
    _embedded?: { [key: string]: object; };
    /**
     * Page metadata.
     * @type {object}
     * @memberof PagedModel
     */
    page?: object;
}
/**
 * 
 * @export
 * @interface Policy
 */
export interface Policy {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof Policy
     */
    policyId: string;
    /**
     * Customer Policy Number.
     * @type {string}
     * @memberof Policy
     */
    policyNumber: string;
    /**
     * 
     * @type {ProductKey}
     * @memberof Policy
     */
    product: ProductKey;
    /**
     * Reference to the quote from which this policy was generated.
     * @type {QuoteKey}
     * @memberof Policy
     */
    quote: QuoteKey;
    /**
     * Reference to the owner of the policy
     * @type {string}
     * @memberof Policy
     */
    userId: string;
    /**
     * Package of coverage provided by this policy.
     * @type {PackageValuation}
     * @memberof Policy
     */
    package: PackageValuation;
    /**
     * Dynamic datasheet object holding customer data for a quote and policy.
     * @type {{ [key: string]: object; }}
     * @memberof Policy
     */
    datasheet: { [key: string]: object; };
    /**
     * UTC Date time stamp.
     * @type {string}
     * @memberof Policy
     */
    startDateTime: string;
    /**
     * UTC Date time stamp.
     * @type {string}
     * @memberof Policy
     */
    endDateTime: string;
    /**
     * UTC Date time stamp.
     * @type {string}
     * @memberof Policy
     */
    activeFrom: string;
    /**
     * UTC Date time stamp.
     * @type {string}
     * @memberof Policy
     */
    activeTo: string;
    /**
     * 
     * @type {PolicyStatus}
     * @memberof Policy
     */
    status: PolicyStatus;
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof Policy
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof Policy
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof Policy
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof Policy
     */
    _embedded?: { [key: string]: object; };
    /**
     * The UTC date-time stamp that the resource was last updated. Automatically set by the system.
     * @type {string}
     * @memberof Policy
     */
    lastModifiedOn: string;
    /**
     * Reference to the user or service that last updated the resource. Automatically set by the system.
     * @type {string}
     * @memberof Policy
     */
    lastModifiedBy: string;
}
/**
 * Core policy resource data
 * @export
 * @interface PolicyBody
 */
export interface PolicyBody {
    /**
     * Customer Policy Number.
     * @type {string}
     * @memberof PolicyBody
     */
    policyNumber: string;
    /**
     * 
     * @type {ProductKey}
     * @memberof PolicyBody
     */
    product: ProductKey;
    /**
     * Reference to the quote from which this policy was generated.
     * @type {QuoteKey}
     * @memberof PolicyBody
     */
    quote: QuoteKey;
    /**
     * Reference to the owner of the policy
     * @type {string}
     * @memberof PolicyBody
     */
    userId: string;
    /**
     * Package of coverage provided by this policy.
     * @type {PackageValuation}
     * @memberof PolicyBody
     */
    package: PackageValuation;
    /**
     * Dynamic datasheet object holding customer data for a quote and policy.
     * @type {{ [key: string]: object; }}
     * @memberof PolicyBody
     */
    datasheet: { [key: string]: object; };
    /**
     * UTC Date time stamp.
     * @type {string}
     * @memberof PolicyBody
     */
    startDateTime: string;
    /**
     * UTC Date time stamp.
     * @type {string}
     * @memberof PolicyBody
     */
    endDateTime: string;
    /**
     * UTC Date time stamp.
     * @type {string}
     * @memberof PolicyBody
     */
    activeFrom: string;
    /**
     * UTC Date time stamp.
     * @type {string}
     * @memberof PolicyBody
     */
    activeTo: string;
    /**
     * 
     * @type {PolicyStatus}
     * @memberof PolicyBody
     */
    status: PolicyStatus;
}
/**
 * Reference to a policy resource
 * @export
 * @interface PolicyKey
 */
export interface PolicyKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof PolicyKey
     */
    policyId: string;
}
/**
 * Page of policy resources
 * @export
 * @interface PolicyPagedModel
 */
export interface PolicyPagedModel {
    /**
     * 
     * @type {HalPageLinks}
     * @memberof PolicyPagedModel
     */
    _links: HalPageLinks;
    /**
     * 
     * @type {HalPolicyListEmbedded}
     * @memberof PolicyPagedModel
     */
    _embedded?: HalPolicyListEmbedded;
    /**
     * Page metadata.
     * @type {object}
     * @memberof PolicyPagedModel
     */
    page?: object;
}
/**
 * Request to create policy from a quote.
 * @export
 * @interface PolicyRequest
 */
export interface PolicyRequest {
    /**
     * 
     * @type {QuoteKey}
     * @memberof PolicyRequest
     */
    quote: QuoteKey;
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof PolicyRequest
     */
    packageId: string;
}
/**
 * The calculated status of the policy based on current date time.
 * @export
 * @enum {string}
 */
export enum PolicyStatus {
    ACTIVE = 'ACTIVE',
    EXPIRED = 'EXPIRED',
    CANCELLED = 'CANCELLED',
    PENDING = 'PENDING',
    UNKNOWN = 'UNKNOWN'
}

/**
 * Reference to a product resource.
 * @export
 * @interface ProductKey
 */
export interface ProductKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof ProductKey
     */
    productId: string;
    /**
     * Major.Minor version number.
     * @type {string}
     * @memberof ProductKey
     */
    version: string;
}
/**
 * Reference to a quote resource
 * @export
 * @interface QuoteKey
 */
export interface QuoteKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof QuoteKey
     */
    quoteId: string;
}
/**
 * Reference to a rating resource
 * @export
 * @interface RatingKey
 */
export interface RatingKey {
    /**
     * Internal unique identifier.
     * @type {string}
     * @memberof RatingKey
     */
    ratingId: string;
}
/**
 * Resource with HAL/Hypermedia support
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * The UTC date-time stamp that the resource was created. Automatically set by the system.
     * @type {string}
     * @memberof Resource
     */
    createdOn: string;
    /**
     * Reference to the user or service that created the resource. Automatically set by the system.
     * @type {string}
     * @memberof Resource
     */
    createdBy: string;
    /**
     * Hypermedia links
     * @type {{ [key: string]: object; }}
     * @memberof Resource
     */
    _links: { [key: string]: object; };
    /**
     * Hypermedia embedded resources
     * @type {{ [key: string]: object; }}
     * @memberof Resource
     */
    _embedded?: { [key: string]: object; };
}
/**
 * Related platform tenant.
 * @export
 * @enum {string}
 */
export enum Tenant {
    INSHUR = 'INSHUR'
}

/**
 * 
 * @export
 * @interface Valuation
 */
export interface Valuation {
    /**
     * 
     * @type {RatingKey}
     * @memberof Valuation
     */
    rating: RatingKey;
    /**
     * Zero-decimal currency. Price for the related insurance item excluding taxes.
     * @type {number}
     * @memberof Valuation
     */
    premium: number | null;
    /**
     * Zero-decimal currency. Tax amount to be applied to this insurance item.
     * @type {number}
     * @memberof Valuation
     */
    tax: number | null;
    /**
     * Zero-decimal currency. Total price for the related insurance item including taxes.
     * @type {number}
     * @memberof Valuation
     */
    total: number | null;
}

/**
 * EndPointsApi - axios parameter creator
 * @export
 */
export const EndPointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new policy based on a quote.  Triggers generation of policy documentation.  The new policy will only be created if payment has been made. 
         * @summary Create Policy
         * @param {PolicyRequest} policyRequest 
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy: async (policyRequest: PolicyRequest, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyRequest' is not null or undefined
            if (policyRequest === null || policyRequest === undefined) {
                throw new RequiredError('policyRequest','Required parameter policyRequest was null or undefined when calling createPolicy.');
            }
            const localVarPath = `/policy`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof policyRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(policyRequest !== undefined ? policyRequest : {}) : (policyRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified policy.  NOTE: Will also delete any linked documents. 
         * @summary Delete Policy
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePolicy.');
            }
            const localVarPath = `/policy/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates any missing policy documents.
         * @summary Generate Policy Documents
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePolicyDocuments: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling generatePolicyDocuments.');
            }
            const localVarPath = `/policy/{id}/documents`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all policies with optional filters.
         * @summary List Policies
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [sort] Order the results. Eg. sort&#x3D;quoteNumber or sort&#x3D;datasheet.insured.dob,datasheet.insured.lastName,asc
         * @param {string} [productId] Filter by product.
         * @param {string} [productVersion] Filter by product (only applies if productId parameter is specified)
         * @param {string} [quoteId] Filter by quote.
         * @param {PolicyStatus} [status] Filter by policy status.
         * @param {string} [fuzzyMatch] Filter by partial, non-case-senstive match on policyNumber, registrationNumber or insuredLastName.
         * @param {string} [userId] Filter by userId (policy owner).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies: async (xINSHURTenant?: Tenant, size?: number, page?: number, sort?: string, productId?: string, productVersion?: string, quoteId?: string, status?: PolicyStatus, fuzzyMatch?: string, userId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/policies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (productVersion !== undefined) {
                localVarQueryParameter['productVersion'] = productVersion;
            }

            if (quoteId !== undefined) {
                localVarQueryParameter['quoteId'] = quoteId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (fuzzyMatch !== undefined) {
                localVarQueryParameter['fuzzyMatch'] = fuzzyMatch;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specified policy.
         * @summary Get Policy
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPolicy.');
            }
            const localVarPath = `/policy/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Overrides the policy start/end and active to/from dates.  **For use in system testing only.**  Use with caution. 
         * @summary Shift Policy Validity
         * @param {string} id Ref to the policy to update.
         * @param {string} startDateTime New policy start date time
         * @param {string} endDateTime New policy end date time
         * @param {string} activeFrom New start of the policy\&#39;s active window
         * @param {string} activeTo New end of the policy\&#39;s active window
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPolicyDateShift: async (id: string, startDateTime: string, endDateTime: string, activeFrom: string, activeTo: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchPolicyDateShift.');
            }
            // verify required parameter 'startDateTime' is not null or undefined
            if (startDateTime === null || startDateTime === undefined) {
                throw new RequiredError('startDateTime','Required parameter startDateTime was null or undefined when calling patchPolicyDateShift.');
            }
            // verify required parameter 'endDateTime' is not null or undefined
            if (endDateTime === null || endDateTime === undefined) {
                throw new RequiredError('endDateTime','Required parameter endDateTime was null or undefined when calling patchPolicyDateShift.');
            }
            // verify required parameter 'activeFrom' is not null or undefined
            if (activeFrom === null || activeFrom === undefined) {
                throw new RequiredError('activeFrom','Required parameter activeFrom was null or undefined when calling patchPolicyDateShift.');
            }
            // verify required parameter 'activeTo' is not null or undefined
            if (activeTo === null || activeTo === undefined) {
                throw new RequiredError('activeTo','Required parameter activeTo was null or undefined when calling patchPolicyDateShift.');
            }
            const localVarPath = `/policy/{id}/date-shift`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (startDateTime !== undefined) {
                localVarQueryParameter['startDateTime'] = (startDateTime as any instanceof Date) ?
                    (startDateTime as any).toISOString() :
                    startDateTime;
            }

            if (endDateTime !== undefined) {
                localVarQueryParameter['endDateTime'] = (endDateTime as any instanceof Date) ?
                    (endDateTime as any).toISOString() :
                    endDateTime;
            }

            if (activeFrom !== undefined) {
                localVarQueryParameter['activeFrom'] = (activeFrom as any instanceof Date) ?
                    (activeFrom as any).toISOString() :
                    activeFrom;
            }

            if (activeTo !== undefined) {
                localVarQueryParameter['activeTo'] = (activeTo as any instanceof Date) ?
                    (activeTo as any).toISOString() :
                    activeTo;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Triggers the cancellation email to the customer.
         * @summary Send Policy Cancellation Notification
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotifyPolicyCancelled: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postNotifyPolicyCancelled.');
            }
            const localVarPath = `/policy/{id}/notify/policy-cancelled`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Triggers the \'welcome\' email to the customer with documentation attached. Intended as a re-send option for admin users only. Will attempt to regenerate any missing documents.
         * @summary Send New Policy Notification
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotifyPolicyCreated: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postNotifyPolicyCreated.');
            }
            const localVarPath = `/policy/{id}/notify/policy-created`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Triggers the expiry reminder email to the customer.
         * @summary Send Policy Expiry Reminder
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotifyPolicyExpiryReminder: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postNotifyPolicyExpiryReminder.');
            }
            const localVarPath = `/policy/{id}/notify/policy-expiry-reminder`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels the specified policy.
         * @summary Cancel Policy
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPolicyCancellation: async (id: string, xINSHURTenant?: Tenant, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postPolicyCancellation.');
            }
            const localVarPath = `/policy/{id}/cancellation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xINSHURTenant !== undefined && xINSHURTenant !== null) {
                localVarHeaderParameter['X-INSHUR-Tenant'] = String(JSON.stringify(xINSHURTenant));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndPointsApi - functional programming interface
 * @export
 */
export const EndPointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new policy based on a quote.  Triggers generation of policy documentation.  The new policy will only be created if payment has been made. 
         * @summary Create Policy
         * @param {PolicyRequest} policyRequest 
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPolicy(policyRequest: PolicyRequest, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).createPolicy(policyRequest, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the specified policy.  NOTE: Will also delete any linked documents. 
         * @summary Delete Policy
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePolicy(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).deletePolicy(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Generates any missing policy documents.
         * @summary Generate Policy Documents
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePolicyDocuments(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).generatePolicyDocuments(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getMetadata(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all policies with optional filters.
         * @summary List Policies
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [sort] Order the results. Eg. sort&#x3D;quoteNumber or sort&#x3D;datasheet.insured.dob,datasheet.insured.lastName,asc
         * @param {string} [productId] Filter by product.
         * @param {string} [productVersion] Filter by product (only applies if productId parameter is specified)
         * @param {string} [quoteId] Filter by quote.
         * @param {PolicyStatus} [status] Filter by policy status.
         * @param {string} [fuzzyMatch] Filter by partial, non-case-senstive match on policyNumber, registrationNumber or insuredLastName.
         * @param {string} [userId] Filter by userId (policy owner).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicies(xINSHURTenant?: Tenant, size?: number, page?: number, sort?: string, productId?: string, productVersion?: string, quoteId?: string, status?: PolicyStatus, fuzzyMatch?: string, userId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPagedModel>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getPolicies(xINSHURTenant, size, page, sort, productId, productVersion, quoteId, status, fuzzyMatch, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the specified policy.
         * @summary Get Policy
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicy(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).getPolicy(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Overrides the policy start/end and active to/from dates.  **For use in system testing only.**  Use with caution. 
         * @summary Shift Policy Validity
         * @param {string} id Ref to the policy to update.
         * @param {string} startDateTime New policy start date time
         * @param {string} endDateTime New policy end date time
         * @param {string} activeFrom New start of the policy\&#39;s active window
         * @param {string} activeTo New end of the policy\&#39;s active window
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPolicyDateShift(id: string, startDateTime: string, endDateTime: string, activeFrom: string, activeTo: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).patchPolicyDateShift(id, startDateTime, endDateTime, activeFrom, activeTo, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Triggers the cancellation email to the customer.
         * @summary Send Policy Cancellation Notification
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNotifyPolicyCancelled(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMessage>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).postNotifyPolicyCancelled(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Triggers the \'welcome\' email to the customer with documentation attached. Intended as a re-send option for admin users only. Will attempt to regenerate any missing documents.
         * @summary Send New Policy Notification
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNotifyPolicyCreated(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).postNotifyPolicyCreated(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Triggers the expiry reminder email to the customer.
         * @summary Send Policy Expiry Reminder
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNotifyPolicyExpiryReminder(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMessage>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).postNotifyPolicyExpiryReminder(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cancels the specified policy.
         * @summary Cancel Policy
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPolicyCancellation(id: string, xINSHURTenant?: Tenant, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await EndPointsApiAxiosParamCreator(configuration).postPolicyCancellation(id, xINSHURTenant, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EndPointsApi - factory interface
 * @export
 */
export const EndPointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new policy based on a quote.  Triggers generation of policy documentation.  The new policy will only be created if payment has been made. 
         * @summary Create Policy
         * @param {PolicyRequest} policyRequest 
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy(policyRequest: PolicyRequest, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Policy> {
            return EndPointsApiFp(configuration).createPolicy(policyRequest, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified policy.  NOTE: Will also delete any linked documents. 
         * @summary Delete Policy
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<void> {
            return EndPointsApiFp(configuration).deletePolicy(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates any missing policy documents.
         * @summary Generate Policy Documents
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePolicyDocuments(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<void> {
            return EndPointsApiFp(configuration).generatePolicyDocuments(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
         * @summary Service Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(options?: any): AxiosPromise<{ [key: string]: object; }> {
            return EndPointsApiFp(configuration).getMetadata(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all policies with optional filters.
         * @summary List Policies
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {number} [size] Page size.
         * @param {number} [page] Page number. Zero-based page index. Default 0.
         * @param {string} [sort] Order the results. Eg. sort&#x3D;quoteNumber or sort&#x3D;datasheet.insured.dob,datasheet.insured.lastName,asc
         * @param {string} [productId] Filter by product.
         * @param {string} [productVersion] Filter by product (only applies if productId parameter is specified)
         * @param {string} [quoteId] Filter by quote.
         * @param {PolicyStatus} [status] Filter by policy status.
         * @param {string} [fuzzyMatch] Filter by partial, non-case-senstive match on policyNumber, registrationNumber or insuredLastName.
         * @param {string} [userId] Filter by userId (policy owner).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies(xINSHURTenant?: Tenant, size?: number, page?: number, sort?: string, productId?: string, productVersion?: string, quoteId?: string, status?: PolicyStatus, fuzzyMatch?: string, userId?: string, options?: any): AxiosPromise<PolicyPagedModel> {
            return EndPointsApiFp(configuration).getPolicies(xINSHURTenant, size, page, sort, productId, productVersion, quoteId, status, fuzzyMatch, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specified policy.
         * @summary Get Policy
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Policy> {
            return EndPointsApiFp(configuration).getPolicy(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Overrides the policy start/end and active to/from dates.  **For use in system testing only.**  Use with caution. 
         * @summary Shift Policy Validity
         * @param {string} id Ref to the policy to update.
         * @param {string} startDateTime New policy start date time
         * @param {string} endDateTime New policy end date time
         * @param {string} activeFrom New start of the policy\&#39;s active window
         * @param {string} activeTo New end of the policy\&#39;s active window
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPolicyDateShift(id: string, startDateTime: string, endDateTime: string, activeFrom: string, activeTo: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Policy> {
            return EndPointsApiFp(configuration).patchPolicyDateShift(id, startDateTime, endDateTime, activeFrom, activeTo, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Triggers the cancellation email to the customer.
         * @summary Send Policy Cancellation Notification
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotifyPolicyCancelled(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<ApiMessage> {
            return EndPointsApiFp(configuration).postNotifyPolicyCancelled(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Triggers the \'welcome\' email to the customer with documentation attached. Intended as a re-send option for admin users only. Will attempt to regenerate any missing documents.
         * @summary Send New Policy Notification
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotifyPolicyCreated(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<void> {
            return EndPointsApiFp(configuration).postNotifyPolicyCreated(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Triggers the expiry reminder email to the customer.
         * @summary Send Policy Expiry Reminder
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotifyPolicyExpiryReminder(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<ApiMessage> {
            return EndPointsApiFp(configuration).postNotifyPolicyExpiryReminder(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels the specified policy.
         * @summary Cancel Policy
         * @param {string} id Unique id of the policy resource.
         * @param {Tenant} [xINSHURTenant] Platform tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPolicyCancellation(id: string, xINSHURTenant?: Tenant, options?: any): AxiosPromise<Policy> {
            return EndPointsApiFp(configuration).postPolicyCancellation(id, xINSHURTenant, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndPointsApi - object-oriented interface
 * @export
 * @class EndPointsApi
 * @extends {BaseAPI}
 */
export class EndPointsApi extends BaseAPI {
    /**
     * Creates a new policy based on a quote.  Triggers generation of policy documentation.  The new policy will only be created if payment has been made. 
     * @summary Create Policy
     * @param {PolicyRequest} policyRequest 
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public createPolicy(policyRequest: PolicyRequest, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).createPolicy(policyRequest, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified policy.  NOTE: Will also delete any linked documents. 
     * @summary Delete Policy
     * @param {string} id Unique id of the policy resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public deletePolicy(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).deletePolicy(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates any missing policy documents.
     * @summary Generate Policy Documents
     * @param {string} id Unique id of the policy resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public generatePolicyDocuments(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).generatePolicyDocuments(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns internal service deployment metadata.  Requires role(s): ```monitor``` 
     * @summary Service Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getMetadata(options?: any) {
        return EndPointsApiFp(this.configuration).getMetadata(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all policies with optional filters.
     * @summary List Policies
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {number} [size] Page size.
     * @param {number} [page] Page number. Zero-based page index. Default 0.
     * @param {string} [sort] Order the results. Eg. sort&#x3D;quoteNumber or sort&#x3D;datasheet.insured.dob,datasheet.insured.lastName,asc
     * @param {string} [productId] Filter by product.
     * @param {string} [productVersion] Filter by product (only applies if productId parameter is specified)
     * @param {string} [quoteId] Filter by quote.
     * @param {PolicyStatus} [status] Filter by policy status.
     * @param {string} [fuzzyMatch] Filter by partial, non-case-senstive match on policyNumber, registrationNumber or insuredLastName.
     * @param {string} [userId] Filter by userId (policy owner).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getPolicies(xINSHURTenant?: Tenant, size?: number, page?: number, sort?: string, productId?: string, productVersion?: string, quoteId?: string, status?: PolicyStatus, fuzzyMatch?: string, userId?: string, options?: any) {
        return EndPointsApiFp(this.configuration).getPolicies(xINSHURTenant, size, page, sort, productId, productVersion, quoteId, status, fuzzyMatch, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the specified policy.
     * @summary Get Policy
     * @param {string} id Unique id of the policy resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public getPolicy(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).getPolicy(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overrides the policy start/end and active to/from dates.  **For use in system testing only.**  Use with caution. 
     * @summary Shift Policy Validity
     * @param {string} id Ref to the policy to update.
     * @param {string} startDateTime New policy start date time
     * @param {string} endDateTime New policy end date time
     * @param {string} activeFrom New start of the policy\&#39;s active window
     * @param {string} activeTo New end of the policy\&#39;s active window
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public patchPolicyDateShift(id: string, startDateTime: string, endDateTime: string, activeFrom: string, activeTo: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).patchPolicyDateShift(id, startDateTime, endDateTime, activeFrom, activeTo, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Triggers the cancellation email to the customer.
     * @summary Send Policy Cancellation Notification
     * @param {string} id Unique id of the policy resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public postNotifyPolicyCancelled(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).postNotifyPolicyCancelled(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Triggers the \'welcome\' email to the customer with documentation attached. Intended as a re-send option for admin users only. Will attempt to regenerate any missing documents.
     * @summary Send New Policy Notification
     * @param {string} id Unique id of the policy resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public postNotifyPolicyCreated(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).postNotifyPolicyCreated(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Triggers the expiry reminder email to the customer.
     * @summary Send Policy Expiry Reminder
     * @param {string} id Unique id of the policy resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public postNotifyPolicyExpiryReminder(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).postNotifyPolicyExpiryReminder(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels the specified policy.
     * @summary Cancel Policy
     * @param {string} id Unique id of the policy resource.
     * @param {Tenant} [xINSHURTenant] Platform tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndPointsApi
     */
    public postPolicyCancellation(id: string, xINSHURTenant?: Tenant, options?: any) {
        return EndPointsApiFp(this.configuration).postPolicyCancellation(id, xINSHURTenant, options).then((request) => request(this.axios, this.basePath));
    }

}


